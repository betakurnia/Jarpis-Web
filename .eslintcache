[{"E:\\Web\\JS\\React\\jarpis\\client\\src\\index.js":"1","E:\\Web\\JS\\React\\jarpis\\client\\src\\App.js":"2","E:\\Web\\JS\\React\\jarpis\\client\\src\\store.js":"3","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\index.js":"4","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Navbar\\index.jsx":"5","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\color.js":"6","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Footer\\index.jsx":"7","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\size.js":"8","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Input\\index.jsx":"9","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRoute.jsx":"10","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Dashboard\\index.jsx":"11","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncement\\index.jsx":"12","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Major\\index.jsx":"13","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\userReducer.js":"14","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\index.js":"15","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\userAction.js":"16","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\setAuthToken.js":"17","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\proxy.js":"18","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\errorReducer.js":"19","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\is-empty.js":"20","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteAdmin.jsx":"21","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\announcementReducer.js":"22","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\announcementAction.js":"23","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\sucessReducer.js":"24","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\AnnouncementUpdate\\index.jsx":"25","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Badge\\index.jsx":"26","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Theory\\index.jsx":"27","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Exams\\index.jsx":"28","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\ExamsStudent\\index.jsx":"29","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\examAction.js":"30","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Profile\\index.jsx":"31","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationValue\\index.jsx":"32","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Recapitulation\\index.jsx":"33","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationStudent\\index.jsx":"34","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\helperAction.js":"35","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonRed\\index.jsx":"36","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonDanger\\index.jsx":"37","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Card\\index.jsx":"38","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\organisms\\Sections\\index.jsx":"39","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonInfo\\index.jsx":"40","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ErrorSucess\\index.jsx":"41","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\QuestionExam\\index.jsx":"42","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CredentialData\\index.jsx":"43","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\EditIcon\\index.jsx":"44","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DeleteIcon\\index.jsx":"45","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\ExamSection\\index.jsx":"46","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TheorySection\\index.jsx":"47","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\Section\\index.jsx":"48","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Register\\index.jsx":"49","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Presence\\index.jsx":"50","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TablePresence\\index.jsx":"51","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\Login\\index.jsx":"52","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Announcment\\index.jsx":"53","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\format.js":"54","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Paper\\index.jsx":"55","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Dialogs\\index.jsx":"56","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ExamIcon\\index.jsx":"57","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\SimpleTable\\index.jsx":"58","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\TheoryIcon\\index.jsx":"59","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CKEditor\\index.jsx":"60","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DialogPresence\\index.jsx":"61","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Sub\\index.jsx":"62","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\NotFound\\index.jsx":"63","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteTeacher.jsx":"64","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\BreadCrumb\\index.jsx":"65","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Header\\index.jsx":"66","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Headers\\index.jsx":"67","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncementNew\\index.jsx":"68"},{"size":197,"mtime":1607606201596,"results":"69","hashOfConfig":"70"},{"size":4374,"mtime":1611169014581,"results":"71","hashOfConfig":"70"},{"size":437,"mtime":1607609459473,"results":"72","hashOfConfig":"70"},{"size":396,"mtime":1607722526773,"results":"73","hashOfConfig":"70"},{"size":18860,"mtime":1611160150155,"results":"74","hashOfConfig":"70"},{"size":598,"mtime":1611152774808,"results":"75","hashOfConfig":"70"},{"size":824,"mtime":1608905042467,"results":"76","hashOfConfig":"70"},{"size":57,"mtime":1608907817813,"results":"77","hashOfConfig":"70"},{"size":1118,"mtime":1611041725232,"results":"78","hashOfConfig":"70"},{"size":592,"mtime":1607729791233,"results":"79","hashOfConfig":"70"},{"size":1743,"mtime":1611168973764,"results":"80","hashOfConfig":"70"},{"size":4429,"mtime":1611168999935,"results":"81","hashOfConfig":"70"},{"size":3629,"mtime":1611166585989,"results":"82","hashOfConfig":"70"},{"size":665,"mtime":1608914836436,"results":"83","hashOfConfig":"70"},{"size":325,"mtime":1609957947967,"results":"84","hashOfConfig":"70"},{"size":2432,"mtime":1608107332339,"results":"85","hashOfConfig":"70"},{"size":313,"mtime":1607685745328,"results":"86","hashOfConfig":"70"},{"size":65,"mtime":1608125450327,"results":"87","hashOfConfig":"70"},{"size":263,"mtime":1608914855607,"results":"88","hashOfConfig":"70"},{"size":234,"mtime":1607687543429,"results":"89","hashOfConfig":"70"},{"size":654,"mtime":1611056073246,"results":"90","hashOfConfig":"70"},{"size":357,"mtime":1608914795229,"results":"91","hashOfConfig":"70"},{"size":1612,"mtime":1611040052049,"results":"92","hashOfConfig":"70"},{"size":267,"mtime":1608914902778,"results":"93","hashOfConfig":"70"},{"size":3951,"mtime":1611058479631,"results":"94","hashOfConfig":"70"},{"size":1706,"mtime":1611067949026,"results":"95","hashOfConfig":"70"},{"size":4869,"mtime":1611068486455,"results":"96","hashOfConfig":"70"},{"size":5337,"mtime":1611068306529,"results":"97","hashOfConfig":"70"},{"size":4564,"mtime":1611068533756,"results":"98","hashOfConfig":"70"},{"size":1542,"mtime":1610733508700,"results":"99","hashOfConfig":"70"},{"size":2325,"mtime":1611069535857,"results":"100","hashOfConfig":"70"},{"size":2291,"mtime":1611053743088,"results":"101","hashOfConfig":"70"},{"size":4087,"mtime":1611154523518,"results":"102","hashOfConfig":"70"},{"size":2319,"mtime":1611066896265,"results":"103","hashOfConfig":"70"},{"size":579,"mtime":1609957937504,"results":"104","hashOfConfig":"70"},{"size":569,"mtime":1609772523142,"results":"105","hashOfConfig":"70"},{"size":688,"mtime":1609772510695,"results":"106","hashOfConfig":"70"},{"size":2507,"mtime":1611141536249,"results":"107","hashOfConfig":"70"},{"size":4410,"mtime":1611163777194,"results":"108","hashOfConfig":"70"},{"size":676,"mtime":1609957080317,"results":"109","hashOfConfig":"70"},{"size":715,"mtime":1611039406140,"results":"110","hashOfConfig":"70"},{"size":1926,"mtime":1611053779222,"results":"111","hashOfConfig":"70"},{"size":751,"mtime":1611000420110,"results":"112","hashOfConfig":"70"},{"size":630,"mtime":1609673562444,"results":"113","hashOfConfig":"70"},{"size":641,"mtime":1610983724797,"results":"114","hashOfConfig":"70"},{"size":3824,"mtime":1611164972744,"results":"115","hashOfConfig":"70"},{"size":3664,"mtime":1611163483199,"results":"116","hashOfConfig":"70"},{"size":1624,"mtime":1611163316252,"results":"117","hashOfConfig":"70"},{"size":9386,"mtime":1611157881473,"results":"118","hashOfConfig":"70"},{"size":6020,"mtime":1611155601458,"results":"119","hashOfConfig":"70"},{"size":8717,"mtime":1611053743278,"results":"120","hashOfConfig":"70"},{"size":5813,"mtime":1611054136642,"results":"121","hashOfConfig":"70"},{"size":1220,"mtime":1611168100092,"results":"122","hashOfConfig":"70"},{"size":328,"mtime":1611066606837,"results":"123","hashOfConfig":"70"},{"size":1385,"mtime":1611047443182,"results":"124","hashOfConfig":"70"},{"size":645,"mtime":1611037290218,"results":"125","hashOfConfig":"70"},{"size":357,"mtime":1611152091802,"results":"126","hashOfConfig":"70"},{"size":2478,"mtime":1611152711070,"results":"127","hashOfConfig":"70"},{"size":366,"mtime":1611152397503,"results":"128","hashOfConfig":"70"},{"size":1504,"mtime":1611053911323,"results":"129","hashOfConfig":"70"},{"size":2464,"mtime":1611067223206,"results":"130","hashOfConfig":"70"},{"size":813,"mtime":1611068127512,"results":"131","hashOfConfig":"70"},{"size":127,"mtime":1611069096002,"results":"132","hashOfConfig":"70"},{"size":660,"mtime":1611070806653,"results":"133","hashOfConfig":"70"},{"size":974,"mtime":1611147433286,"results":"134","hashOfConfig":"70"},{"size":806,"mtime":1611163666470,"results":"135","hashOfConfig":"70"},{"size":563,"mtime":1611166675470,"results":"136","hashOfConfig":"70"},{"size":3484,"mtime":1611168881067,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"1sid8fm",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"140"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"140"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"140"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"140"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"140"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"140"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"140"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"140"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"140"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"140"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"140"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"140"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Web\\JS\\React\\jarpis\\client\\src\\index.js",[],["290","291"],"E:\\Web\\JS\\React\\jarpis\\client\\src\\App.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\store.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\index.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Navbar\\index.jsx",["292","293","294","295","296"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport css from \"./style.css\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport CastForEducationIcon from \"@material-ui/icons/CastForEducation\";\r\nimport TabIcon from \"@material-ui/icons/Tab\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport ClassIcon from \"@material-ui/icons/Class\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport BookIcon from \"@material-ui/icons/Book\";\r\nimport SchoolIcon from \"@material-ui/icons/School\";\r\nimport TableChartIcon from \"@material-ui/icons/TableChart\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\n\r\nimport color from \"../../../utils/color\";\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport size from \"../../../utils/size\";\r\nimport { logoutUser } from \"../../../redux/actions/userAction\";\r\n\r\nfunction Navbar({ user, logoutUser, history }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginBottom: `${size.big}rem`,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    menuItem: {\r\n      minWidth: 300,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      cursor: \"pointer\",\r\n    },\r\n    announcement: {\r\n      padding: \"0 1.5rem\",\r\n      display: \"inline-block\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        paddingRight: \"0.5rem\",\r\n        paddingLeft: \"0.5rem\",\r\n      },\r\n    },\r\n    disabled: {\r\n      cursor: \"default\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"inherit\",\r\n      },\r\n      \"&:visited\": {\r\n        backgroundColor: \"inherit\",\r\n      },\r\n      \"&:active\": {\r\n        backgroundColor: \"inherit\",\r\n      },\r\n    },\r\n    subTab: {\r\n      paddingLeft: \"2rem\",\r\n    },\r\n    subSubTab: {\r\n      paddingLeft: \"4rem\",\r\n    },\r\n    appBar: {\r\n      backgroundColor: color.primary,\r\n    },\r\n    majorIcon: {\r\n      width: 24,\r\n      height: 24,\r\n    },\r\n    darkActive: {\r\n      backgroundColor: color.primary,\r\n      color: color.white,\r\n      \"&:hover\": {\r\n        backgroundColor: color.primary,\r\n        color: color.white,\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const [currentMajor, setCurrentMajor] = useState({\r\n    majorName: \"\",\r\n  });\r\n\r\n  const [majors, setMajors] = useState([]);\r\n\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n\r\n  const [isShowTheory] = useState(true);\r\n\r\n  const { location } = useHistory();\r\n\r\n  const [admins] = useState([\r\n    {\r\n      name: \"Daftar\",\r\n      link: \"/admin/register\",\r\n      icon: <LockOpenIcon />,\r\n    },\r\n    {\r\n      name: \"Pengumuman\",\r\n      link: \"/admin/pengumuman\",\r\n      icon: <AnnouncementIcon />,\r\n    },\r\n    {\r\n      name: \"Rekapitulasi\",\r\n      link: \"/admin/rekapitulasi\",\r\n      icon: <TableChartIcon />,\r\n    },\r\n  ]);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const [recapitulation, setRecapitulation] = useState([]);\r\n\r\n  const handleClose = (e, status) => {\r\n    if (status === \"profile\") {\r\n      history.push(\"/profile\");\r\n    }\r\n    if (status === \"nilai\") {\r\n      history.push(\"/nilai\");\r\n    }\r\n\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    setAnchorEl(null);\r\n\r\n    logoutUser(history);\r\n  };\r\n\r\n  const handleShowTheory = () => {\r\n    setIsDrawerOpen(true);\r\n  };\r\n\r\n  const handleToggleDrawer = (e) => {\r\n    setIsDrawerOpen(!isDrawerOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.pathname.length > 2) {\r\n      axios\r\n        .get(`${proxy}/api/majors/view/${location.pathname.split(\"/\")[2]}`)\r\n        .then((res) => {\r\n          if (res.data) {\r\n            const { data } = res;\r\n\r\n            setCurrentMajor(data);\r\n          } else {\r\n            setCurrentMajor({ majorName: \"\" });\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  useEffect(() => {\r\n    if (user.isAuthenticated.role === \"teacher\") {\r\n      axios\r\n        .post(`${proxy}/api/majors/viewByArray`, user.isAuthenticated.majorId)\r\n        .then((res) => {\r\n          setMajors(res.data);\r\n          setRecapitulation([...res.data]);\r\n        });\r\n    }\r\n    if (user.isAuthenticated.role === \"siswa\") {\r\n      axios\r\n        .get(`${proxy}/api/majors/view?kelasId=${user.user.kelasId}`)\r\n        .then((res) => {\r\n          const { data } = res;\r\n\r\n          setMajors([...data]);\r\n        });\r\n    }\r\n\r\n    if (user.isAuthenticated.role === \"admin\") {\r\n      axios.get(`${proxy}/api/majors/view`).then((res) => {\r\n        const { data } = res;\r\n\r\n        setMajors([...data]);\r\n      });\r\n    }\r\n  }, [user.isAuthenticated.role, user.isAuthenticated.majorId]);\r\n\r\n  console.log(currentMajor);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          {user.isAuthenticated && (\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              onClick={handleToggleDrawer}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          )}\r\n\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Link to=\"/\">\r\n              <SchoolIcon style={{ padding: \"0 0.4rem\" }} />\r\n              Jarpis\r\n            </Link>\r\n            <Link to=\"/pengumuman\" className={classes.announcement}>\r\n              <Typography className={classes.announcement}>\r\n                Pengumuman\r\n              </Typography>\r\n            </Link>\r\n          </Typography>\r\n\r\n          {user.isAuthenticated && (\r\n            <div>\r\n              <span>{user.isAuthenticated.name}</span>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                {user.isAuthenticated.role === \"siswa\" && (\r\n                  <Fragment>\r\n                    <MenuItem\r\n                      onClick={(e) => {\r\n                        handleClose(e, \"profile\");\r\n                      }}\r\n                    >\r\n                      Profile\r\n                    </MenuItem>{\" \"}\r\n                    <MenuItem\r\n                      onClick={(e) => {\r\n                        handleClose(e, \"nilai\");\r\n                      }}\r\n                    >\r\n                      Nilai{\" \"}\r\n                    </MenuItem>\r\n                  </Fragment>\r\n                )}\r\n                <MenuItem onClick={handleLogOut}>\r\n                  Keluar <ExitToAppIcon style={{ paddingLeft: \"0.5rem\" }} />\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n        <Drawer anchor=\"left\" open={isDrawerOpen} onClose={handleToggleDrawer}>\r\n          <div onClick={handleToggleDrawer} onKeyDown={handleToggleDrawer}>\r\n            <List>\r\n              <Link to=\"/dashboard\">\r\n                <ListItem\r\n                  button\r\n                  key=\"dashboard\"\r\n                  className={clsx(classes.menuItem, {\r\n                    [classes.darkActive]: location.pathname === \"/dashboard\",\r\n                  })}\r\n                >\r\n                  <ListItemIcon\r\n                    className={clsx({\r\n                      [classes.darkActive]: location.pathname === \"/dashboard\",\r\n                    })}\r\n                  >\r\n                    {<DashboardIcon />}\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Dashboard\" />\r\n                </ListItem>\r\n              </Link>\r\n              {user.isAuthenticated.role === \"siswa\" ? (\r\n                <ListItem\r\n                  button\r\n                  className={(classes.menuItem, classes.disabled)}\r\n                >\r\n                  <ListItemIcon>\r\n                    <ClassIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText> Kelas {user.user.kelas}</ListItemText>\r\n                </ListItem>\r\n              ) : (\r\n                <ListItem\r\n                  button\r\n                  className={(classes.menuItem, classes.disabled)}\r\n                >\r\n                  <ListItemIcon>\r\n                    {\" \"}\r\n                    {user.isAuthenticated.role === \"teacher\" ? (\r\n                      <ClassIcon />\r\n                    ) : (\r\n                      <TabIcon />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    {user.isAuthenticated.role === \"teacher\"\r\n                      ? \"Kelas \"\r\n                      : \"Mata Pelajaran\"}\r\n                    {!isEmpty(user.user.kelas) && user.user.kelas.split(\"\")[0]}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              )}\r\n              {majors.map((major) => (\r\n                <Link to={`/mata-pelajaran/${major._id}`}>\r\n                  {!Boolean(currentMajor.majorName == major.majorName) ? (\r\n                    <ListItem\r\n                      button\r\n                      key={major.majorName}\r\n                      className={clsx(classes.menuItem, classes.subTab)}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <img\r\n                          className={classes.img}\r\n                          alt={major.imageName}\r\n                          src={`/majors/${major.imageName}`}\r\n                          className={classes.majorIcon}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={major.majorName} />\r\n                    </ListItem>\r\n                  ) : (\r\n                    <ListItem\r\n                      button\r\n                      key={major.majorName}\r\n                      className={clsx(classes.menuItem, classes.subTab)}\r\n                      style={{\r\n                        backgroundColor: major.color,\r\n                        color: color.white,\r\n                      }}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <img\r\n                          className={classes.img}\r\n                          alt={major.imageName}\r\n                          src={`/majors/${major.imageName}`}\r\n                          className={classes.majorIcon}\r\n                          style={{\r\n                            color: color.white,\r\n                          }}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={major.majorName} />\r\n                    </ListItem>\r\n                  )}\r\n                </Link>\r\n              ))}\r\n              {user.isAuthenticated.role === \"admin\" && (\r\n                <Fragment>\r\n                  <ListItem\r\n                    button\r\n                    key=\"Admin\"\r\n                    className={(classes.menuItem, classes.disabled)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      {\" \"}\r\n                      <TabIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Admin Panel\" />\r\n                  </ListItem>\r\n                  {admins.map((admin) => (\r\n                    <Link to={`${admin.link}`}>\r\n                      <ListItem\r\n                        button\r\n                        key={admin.name}\r\n                        className={clsx(classes.menuItem, classes.subTab, {\r\n                          [classes.darkActive]:\r\n                            location.pathname === admin.link,\r\n                        })}\r\n                      >\r\n                        <ListItemIcon\r\n                          className={clsx({\r\n                            [classes.darkActive]:\r\n                              location.pathname === admin.link,\r\n                          })}\r\n                        >\r\n                          {\" \"}\r\n                          {admin.icon}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={admin.name} />\r\n                      </ListItem>\r\n                    </Link>\r\n                  ))}\r\n                </Fragment>\r\n              )}\r\n\r\n              {user.isAuthenticated.role === \"teacher\" && (\r\n                <Fragment>\r\n                  <ListItem\r\n                    button\r\n                    key=\"Teacher\"\r\n                    className={(classes.menuItem, classes.disabled)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      {\" \"}\r\n                      <TabIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Guru Panel\" />\r\n                  </ListItem>\r\n\r\n                  {majors.map((major) => (\r\n                    <Fragment>\r\n                      <ListItem\r\n                        name=\"subTab\"\r\n                        onClick={handleShowTheory}\r\n                        button\r\n                        className={(classes.menuItem, classes.subTab)}\r\n                      >\r\n                        <ListItemIcon>\r\n                          {\" \"}\r\n                          <BookIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText>{major.majorName} </ListItemText>\r\n                        <ListItemIcon>\r\n                          {\" \"}\r\n                          <ArrowDropDownIcon />\r\n                        </ListItemIcon>\r\n                      </ListItem>\r\n                      {isShowTheory &&\r\n                        [...new Array(14)].map((a, i) => (\r\n                          <Link\r\n                            to={`${\r\n                              i + 1 === 7\r\n                                ? `/guru/ujian/UTS-${major.majorName}/${major._id}`\r\n                                : \"\"\r\n                            }${\r\n                              i + 1 === 14\r\n                                ? `/guru/ujian/UAS-${major.majorName}/${major._id}`\r\n                                : \"\"\r\n                            }${\r\n                              !(i + 1 === 7) && !(i + 1 === 14)\r\n                                ? `/guru/materi/${i + 1}/${major._id}`\r\n                                : \"\"\r\n                            }`}\r\n                          >\r\n                            <ListItem\r\n                              key={i}\r\n                              button\r\n                              className={(classes.menuItem, classes.subSubTab)}\r\n                            >\r\n                              <ListItemIcon>\r\n                                {\" \"}\r\n                                <LibraryAddIcon />\r\n                              </ListItemIcon>\r\n                              <ListItemText>\r\n                                {i + 1 === 7 && \"UTS\"} {i + 1 === 14 && \"UAS\"}{\" \"}\r\n                                {!(i + 1 === 7) &&\r\n                                  !(i + 1 === 14) &&\r\n                                  `Materi ke ${i + 1}`}{\" \"}\r\n                              </ListItemText>\r\n                            </ListItem>\r\n                          </Link>\r\n                        ))}\r\n                    </Fragment>\r\n                  ))}\r\n                  <ListItem button key=\"Rekapitulasi Nilai\">\r\n                    <ListItemIcon>\r\n                      {\" \"}\r\n                      <TableChartIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Rekapitulasi Nilai\" />\r\n                  </ListItem>\r\n                </Fragment>\r\n              )}\r\n\r\n              {recapitulation.map((recap) => (\r\n                <div>\r\n                  <Link\r\n                    to={`/guru/rekapitulasi/UTS-${recap.majorName}/${recap._id}`}\r\n                    style={{ marginTop: 0 }}\r\n                  >\r\n                    <ListItem\r\n                      button\r\n                      key={recap.majorName}\r\n                      className={(classes.menuItem, classes.subTab)}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <CastForEducationIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>UTS {recap.majorName}</ListItemText>\r\n                    </ListItem>\r\n                  </Link>\r\n                  <Link\r\n                    to={`/guru/rekapitulasi/UAS-${recap.majorName}/${recap._id}`}\r\n                  >\r\n                    <ListItem\r\n                      button\r\n                      key={recap.majorName}\r\n                      className={(classes.menuItem, classes.subTab)}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <CastForEducationIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>UAS {recap.majorName}</ListItemText>\r\n                    </ListItem>\r\n                  </Link>\r\n                </div>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        </Drawer>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, { logoutUser })(Navbar));\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\color.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Footer\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\size.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Input\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRoute.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Dashboard\\index.jsx",["297"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Card from \"../../atoms/Card\";\r\nimport Headers from \"../../atoms/Headers\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\n\r\nfunction Dashboard({ user }) {\r\n  const [majors, setMajors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const { role, majorId } = user.isAuthenticated;\r\n\r\n    if (role === \"teacher\") {\r\n      axios.post(`${proxy}/api/majors/viewByArray`, majorId).then((res) => {\r\n        const { data } = res;\r\n\r\n        setMajors([...data]);\r\n      });\r\n    }\r\n\r\n    if (role === \"siswa\") {\r\n      axios\r\n        .get(`${proxy}/api/majors/view?kelasId=${user.user.kelasId}`)\r\n        .then((res) => {\r\n          const { data } = res;\r\n\r\n          setMajors([...data]);\r\n        });\r\n    }\r\n\r\n    if (role === \"admin\") {\r\n      axios.get(`${proxy}/api/majors/view`).then((res) => {\r\n        const { data } = res;\r\n\r\n        setMajors([...data]);\r\n      });\r\n    }\r\n  }, [user.isAuthenticated.majorId]);\r\n\r\n  const majorCards = majors.map(\r\n    ({\r\n      _id,\r\n      majorName,\r\n      hoursOfSubject,\r\n      hoursOfSubjectFinish,\r\n      imageName,\r\n      color,\r\n    }) => (\r\n      <Card\r\n        id={_id}\r\n        title={majorName}\r\n        from={hoursOfSubject}\r\n        to={hoursOfSubjectFinish}\r\n        imageName={imageName}\r\n        color={color}\r\n      />\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Headers title=\"Mata Pelajaran\" />\r\n      <Grid container spacing={3}>\r\n        {majorCards}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncement\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Major\\index.jsx",["298"],"import React, { useState, useEffect, useRef, Fragment } from \"react\";\r\n\r\nimport BreadCrumb from \"../../atoms/BreadCrumb\";\r\nimport Sections from \"../../organisms/Sections\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport color from \"../../../utils/color\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport proxy from \"../../../utils/proxy\";\r\n\r\nfunction Major({ user }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Januari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const headerDOM = useRef(null);\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      backgroundColor: color.white,\r\n      padding: \"2rem\",\r\n      boxShadow: \"0 1rem 3rem rgba(0, 0, 0, 0.175) \",\r\n    },\r\n    header: {\r\n      color: color.white,\r\n      padding: \"1rem 2rem\",\r\n    },\r\n    title: {\r\n      fontWeight: 500,\r\n    },\r\n    img: {\r\n      height: 54,\r\n      width: 54,\r\n    },\r\n    box: {\r\n      paddingLeft: \"1.5rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const { id } = useParams();\r\n\r\n  const [major, setMajor] = useState({});\r\n\r\n  const { majorName, imageName, hoursOfSubject, hoursOfSubjectFinish } = major;\r\n\r\n  const { role } = user.isAuthenticated;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${proxy}/api/majors/view/${id}`)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        headerDOM.current.style.backgroundColor = data.color;\r\n\r\n        setMajor({ ...data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, [id]);\r\n\r\n  const header = !isEmpty(major) && (\r\n    <Fragment>\r\n      <Grid container alignItems=\"center\">\r\n        <img\r\n          className={classes.img}\r\n          alt=\"education\"\r\n          src={`/majors/${imageName}`}\r\n        />\r\n        <div className={classes.box}>\r\n          <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\r\n            {majorName}\r\n          </Typography>\r\n          <Typography variant=\"body\" component=\"p\" className={classes.title}>\r\n            {dateFormat(hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n            {dateFormat(hoursOfSubjectFinish, \"hh:MM TT\")}\r\n          </Typography>\r\n        </div>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <BreadCrumb />\r\n      <div className={classes.header} ref={headerDOM}>\r\n        {header}\r\n      </div>\r\n      <div className={classes.root}>\r\n        <Sections\r\n          id={id}\r\n          isStudent={role === \"siswa\"}\r\n          isTeacher={role === \"teacher\"}\r\n          majorName={majorName}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Major);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\userReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\index.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\userAction.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\setAuthToken.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\proxy.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\errorReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\is-empty.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteAdmin.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\announcementReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\announcementAction.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\sucessReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\AnnouncementUpdate\\index.jsx",["299"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Paper from \"../../atoms/Paper\";\r\nimport Input from \"../../atoms/Input\";\r\nimport ErrorSucess from \"../../atoms/ErrorSucess\";\r\nimport CKEditor from \"../../atoms/CKEditor\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\nimport axios from \"axios\";\r\nimport { withRouter, useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport color from \"../../../utils/color\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport {\r\n  addAnnouncement,\r\n  updateAnnouncement,\r\n} from \"../../../redux/actions/announcementAction\";\r\nimport { clearErrorSucess } from \"../../../redux/actions/helperAction\";\r\n\r\nfunction AnnouncementUpdate({\r\n  sucess,\r\n  error,\r\n  addAnnouncement,\r\n  updateAnnouncement,\r\n  clearErrorSucess,\r\n  history,\r\n}) {\r\n  const useStyles = makeStyles({\r\n    btn: {\r\n      marginTop: \"2rem\",\r\n    },\r\n    alert: {\r\n      marginTop: \"1.5rem\",\r\n    },\r\n    formControl: {\r\n      marginTop: \"1.5rem\",\r\n    },\r\n    label: {\r\n      color: color.label,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const { id } = useParams();\r\n\r\n  const [announcement, setAnnouncement] = useState({\r\n    title: \"\",\r\n    description:\r\n      \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    announcement[name] = value;\r\n    setAnnouncement({ ...announcement });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (Boolean(!id)) {\r\n      addAnnouncement(announcement, history);\r\n    }\r\n\r\n    if (Boolean(id)) {\r\n      updateAnnouncement(id, announcement, history);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearErrorSucess();\r\n    if (id) {\r\n      axios\r\n        .get(`${proxy}/api/announcement/view/${id}`)\r\n        .then((res) => {\r\n          const { title, description } = res.data;\r\n\r\n          announcement[\"title\"] = title;\r\n          announcement[\"description\"] = description;\r\n\r\n          setAnnouncement({ ...announcement });\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [clearErrorSucess, id]);\r\n\r\n  const { title } = announcement;\r\n\r\n  return (\r\n    <Paper title=\"Pengumuman\">\r\n      <form onSubmit={onSubmit}>\r\n        <Input\r\n          id=\"title\"\r\n          label=\"Judul\"\r\n          name=\"title\"\r\n          handleChange={handleChange}\r\n          value={title}\r\n        />\r\n        <CKEditor value={announcement} setValue={setAnnouncement} />\r\n        <ErrorSucess\r\n          isSucess={sucess}\r\n          isError={!isEmpty(error)}\r\n          errorMessages={[error.title, error.description]}\r\n        />\r\n        <Grid container justify=\"center\">\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              className={classes.btn}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sucess: state.sucess,\r\n  error: state.error,\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, {\r\n    addAnnouncement,\r\n    updateAnnouncement,\r\n    clearErrorSucess,\r\n  })(AnnouncementUpdate)\r\n);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Badge\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Theory\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Exams\\index.jsx",["300"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Input from \"../../atoms/Input\";\r\nimport Paper from \"../../atoms/Paper\";\r\nimport ErrorSucess from \"../../atoms/ErrorSucess\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport { formatUrl } from \"../../../utils/format\";\r\nimport { createExam } from \"../../../redux/actions/examAction\";\r\nimport { clearErrorSucess } from \"../../../redux/actions/helperAction\";\r\n\r\nfunction Exams({ user, error, sucess, createExam, clearErrorSucess }) {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      listStyle: \"none\",\r\n      \"& li\": {\r\n        display: \"flex\",\r\n        alignItems: \"flex-end\",\r\n      },\r\n    },\r\n    btn: {\r\n      marginTop: \"2rem\",\r\n    },\r\n    icon: {\r\n      paddingLeft: \"0.5rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const { ujian, id } = useParams();\r\n\r\n  const [dataAnswers] = useState([\r\n    {\r\n      value: \"a\",\r\n      label: \"Jawaban a\",\r\n      idx: 0,\r\n    },\r\n    {\r\n      value: \"b\",\r\n      label: \"Jawaban b\",\r\n      idx: 1,\r\n    },\r\n    {\r\n      value: \"c\",\r\n      label: \"Jawaban c\",\r\n      idx: 2,\r\n    },\r\n    {\r\n      value: \"d\",\r\n      label: \"Jawaban d\",\r\n      idx: 3,\r\n    },\r\n  ]);\r\n\r\n  const [exam, setExam] = useState([...new Array(5)]);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const handleMenus = (e, i) => {\r\n    exam[i].answer = e.target.value;\r\n\r\n    setExam([...exam]);\r\n  };\r\n\r\n  const handleAddQuestion = () => {\r\n    const question = [\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n    ];\r\n    setExam([...exam, ...question]);\r\n  };\r\n\r\n  const handleChange = (e, id, idx) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (Boolean(idx)) {\r\n      exam[name].possibilitesAnswer[idx] = value;\r\n      setExam([...exam]);\r\n    }\r\n\r\n    if (!Boolean(idx)) {\r\n      exam[name].examName = value;\r\n      setExam([...exam]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    createExam({\r\n      userId: \"guru\",\r\n      teacherId: user.user.id,\r\n      majorId: id,\r\n      question: exam,\r\n      type: ujian,\r\n    });\r\n  };\r\n\r\n  const questionExams =\r\n    !loading &&\r\n    exam.map(({ examName, answer, possibilitesAnswer }, i) => (\r\n      <div>\r\n        <Input\r\n          id={i}\r\n          label={`Soal no ${i + 1}`}\r\n          handleChange={handleChange}\r\n          value={examName}\r\n        />\r\n        <ul className={classes.root}>\r\n          <RadioGroup\r\n            aria-label=\"answer\"\r\n            name={i}\r\n            value={answer}\r\n            onChange={(e) => {\r\n              handleMenus(e, i);\r\n            }}\r\n          >\r\n            {dataAnswers.map(({ value, label, idx }) => (\r\n              <li>\r\n                {\" \"}\r\n                <FormControlLabel value={value} control={<Radio />} />{\" \"}\r\n                <Input\r\n                  id={i}\r\n                  label={label}\r\n                  name={i}\r\n                  idx={idx}\r\n                  handleChange={handleChange}\r\n                  value={possibilitesAnswer[0]}\r\n                />\r\n              </li>\r\n            ))}\r\n          </RadioGroup>\r\n        </ul>\r\n      </div>\r\n    ));\r\n\r\n  useEffect(() => {\r\n    clearErrorSucess();\r\n    axios.get(`${proxy}/api/exams/view/${id}?type=${ujian}`).then((res) => {\r\n      const { data } = res;\r\n\r\n      if (Boolean(data)) {\r\n        setExam([...data.question]);\r\n      }\r\n\r\n      if (!Boolean(data)) {\r\n        exam.forEach((empty, i) => {\r\n          const question = {\r\n            possibilitesAnswer: [],\r\n          };\r\n          exam[i] = question;\r\n        });\r\n        setExam([...exam]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [id]);\r\n\r\n  return (\r\n    <Paper title={formatUrl(ujian)}>\r\n      {questionExams}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        className={classes.btn}\r\n        onClick={handleAddQuestion}\r\n      >\r\n        Tambah 5 Soal <AddIcon className={classes.icon} />\r\n      </Button>{\" \"}\r\n      <ErrorSucess\r\n        isError={!isEmpty(error)}\r\n        isSucess={Boolean(sucess)}\r\n        errorMessages={[error.examStudentAnswer]}\r\n        sucessMessage=\"Berhasil Dibuat\"\r\n      />\r\n      <Grid container justify=\"center\">\r\n        <Grid item xs={12} md={6}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleSubmit}\r\n            className={classes.btn}\r\n            fullWidth\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n  error: state.error,\r\n  sucess: state.sucess,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createExam, clearErrorSucess })(\r\n  Exams\r\n);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\ExamsStudent\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\examAction.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Profile\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationValue\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Recapitulation\\index.jsx",["301","302","303","304","305","306","307"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { BadgeExam } from \"../../atoms/Badge\";\r\nimport SimpleTable from \"../../atoms/SimpleTable\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport color from \"../../../utils/color\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  blue: {\r\n    backgroundColor: color.primary,\r\n    padding: \"0.5rem 1rem\",\r\n    color: color.white,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  allowed: {\r\n    backgroundColor: color.info,\r\n    padding: \"0.5rem 1rem\",\r\n    color: color.white,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  notAllow: {\r\n    backgroundColor: color.danger,\r\n    padding: \"0.5rem 1rem\",\r\n    color: color.white,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  bgPrimary: {\r\n    backgroundColor: color.primary,\r\n  },\r\n  tableRow: {\r\n    \"& > *\": {\r\n      color: color.white,\r\n    },\r\n  },\r\n  container: {\r\n    marginTop: \"3rem\",\r\n  },\r\n  pagination: {\r\n    marginTop: \"2rem\",\r\n    color: color.primary,\r\n  },\r\n});\r\n\r\nfunction Recapitulation({ id, user, major }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const [recapitulations, setRecapitulation] = useState([]);\r\n\r\n  const [dataColumnHeaders] = useState([\r\n    \"Siswa\",\r\n    \"Mata Pelajaran\",\r\n    \"Total Kehadiran\",\r\n    \"Dapat Mengikuti Ujian\",\r\n  ]);\r\n\r\n  const tableBodys = recapitulations.map(({ _id, userId, majorId, status }) => (\r\n    <TableRow key={_id}>\r\n      <TableCell> {userId.name}</TableCell>\r\n      <TableCell>{majorId.majorName}</TableCell>\r\n      <TableCell>{status.length} / 14</TableCell>\r\n      <TableCell>\r\n        <BadgeExam presence={status.length} />\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n\r\n  const [present, setPresent] = useState({\r\n    userId: \"\",\r\n    majorId: \"\",\r\n    status: \"hadir\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    present[\"userId\"] = user.user.id;\r\n    present[\"majorId\"] = id;\r\n    setPresent({ ...present });\r\n\r\n    axios\r\n      .get(`${proxy}/api/users/view`)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setRecapitulation([...data]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      <Alert severity=\"warning\">\r\n        Dapat mengikuti ujian ketika kehadiran lebih dari 8\r\n      </Alert>\r\n      <SimpleTable dataColumnHeaders={dataColumnHeaders}>\r\n        {tableBodys}\r\n      </SimpleTable>\r\n      <Pagination\r\n        className={classes.pagination}\r\n        count={10}\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        shape=\"rounded\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Recapitulation);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationStudent\\index.jsx",["308"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport SimpleTable from \"../../atoms/SimpleTable\";\r\nimport { BadgeResult as Badge } from \"../../atoms/Badge\";\r\n\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\n\r\nfunction RecapitulationStudent({ user }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const [recapitulations, setRecapitulation] = useState([]);\r\n\r\n  const [dataColumnHeaders] = useState([\r\n    \"Siswa\",\r\n    \"Tipe\",\r\n    \"Mata Pelajaran\",\r\n    \"Nilai\",\r\n  ]);\r\n\r\n  const tableBodys = recapitulations.map(\r\n    ({ userId, majorId, type, result }) => (\r\n      <TableRow key={userId}>\r\n        <TableCell> {userId.name}</TableCell>\r\n        <TableCell>{type.split(\"-\")[0]}</TableCell>\r\n        <TableCell>{majorId.majorName}</TableCell>\r\n        <TableCell>\r\n          <Badge result={result} />\r\n        </TableCell>\r\n      </TableRow>\r\n    )\r\n  );\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${proxy}/api/exams/view/recapitulations/${user.isAuthenticated.id}`)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setRecapitulation([...data]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <SimpleTable dataColumnHeaders={dataColumnHeaders}>\r\n      {tableBodys}\r\n    </SimpleTable>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(RecapitulationStudent);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\helperAction.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonRed\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonDanger\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Card\\index.jsx",["309"],"import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport color from \"../../../utils/color\";\r\n\r\nfunction Card({\r\n  id,\r\n  title,\r\n  from,\r\n  to,\r\n  imageName = \"science.png\",\r\n  color = \"red\",\r\n}) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Januari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      boxShadow: \"0 .5rem 1rem rgba(0,0,0,.15)\",\r\n    },\r\n    img: {\r\n      maxWidth: \"90%\",\r\n      height: \"200px\",\r\n    },\r\n    description: {\r\n      marginTop: \"0.5rem\",\r\n    },\r\n    imgBox: {\r\n      textAlign: \"center\",\r\n      padding: \"2rem\",\r\n    },\r\n    descriptionBox: {\r\n      backgroundColor: color,\r\n      color: \"white\",\r\n      padding: \"2rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={6} sm={4} md={3}>\r\n      <Link to={`/mata-pelajaran/${id}`}>\r\n        <div className={classes.root}>\r\n          <div className={classes.imgBox}>\r\n            <img\r\n              className={classes.img}\r\n              alt=\"education\"\r\n              src={`/majors/${imageName}`}\r\n            />\r\n          </div>\r\n          <div className={classes.descriptionBox}>\r\n            <Typography variant=\"h6\" component=\"h2\" className={classes.title}>\r\n              {title}\r\n            </Typography>\r\n            <Typography\r\n              variant=\"body1\"\r\n              component=\"p\"\r\n              className={classes.description}\r\n            >\r\n              {dateFormat(from, \"dddd hh:MM TT\")} - {dateFormat(to, \"hh:MM TT\")}\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\organisms\\Sections\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonInfo\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ErrorSucess\\index.jsx",["310"],"import React from \"react\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\n\r\nimport color from \"../../../utils/color\";\r\n\r\nfunction ErrorSucess({ isSucess, isError, sucessMessage, errorMessages }) {\r\n  const useStyles = makeStyles({\r\n    alert: {\r\n      marginTop: \"1.5rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {isSucess && <Alert className={classes.alert}>{sucessMessage}</Alert>}\r\n      {isError && (\r\n        <Alert className={classes.alert} severity=\"error\">\r\n          {errorMessages.filter((errorMessage) => errorMessage)[0]}\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorSucess;\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\QuestionExam\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CredentialData\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\EditIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DeleteIcon\\index.jsx",[],["311","312"],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\ExamSection\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TheorySection\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\Section\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Register\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Presence\\index.jsx",["313"],"import React, { useState, useEffect, Fragment } from \"react\";\r\n\r\nimport { BadgeStatus as Badge } from \"../../atoms/Badge\";\r\nimport SimpleTable from \"../../atoms/SimpleTable\";\r\nimport DialogPresence from \"../../atoms/DialogPresence\";\r\n\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport color from \"../../../utils/color\";\r\nimport { isAvailablePresence } from \"../../../utils/format\";\r\n\r\nfunction Presence({ user }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      backgroundColor: color.white,\r\n      padding: \"2rem\",\r\n      boxShadow: \"0 .5rem 1rem rgba(0,0,0,.15)\",\r\n    },\r\n    title: {\r\n      fontWeight: 500,\r\n    },\r\n    able: {\r\n      cursor: \"pointer\",\r\n    },\r\n    disabled: {\r\n      color: color.light,\r\n    },\r\n    date: {\r\n      lineHeight: 0.5,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  let [index] = useState(0);\r\n\r\n  const { id } = useParams();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [presents, setPresents] = useState({\r\n    status: [],\r\n  });\r\n\r\n  const [present, setPresent] = useState({\r\n    userId: \"\",\r\n    majorId: \"\",\r\n    status: \"Hadir\",\r\n  });\r\n\r\n  const [major, setMajor] = useState({});\r\n\r\n  const [dataColumnHeaders] = useState([\"Tanggal\", \"Deskripsi\", \"Status\"]);\r\n\r\n  const [undoneArray, setUndoneArray] = useState([]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n\r\n    present[\"status\"] = value;\r\n    setPresent({ ...present });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setOpen(false);\r\n\r\n    axios\r\n      .post(`${proxy}/api/presents/create`, present)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setPresents({ ...data });\r\n      })\r\n      .catch((err) => console.log(err.response.data));\r\n  };\r\n\r\n  const tableBodys = presents.status.map((status) => (\r\n    <TableRow key={status}>\r\n      <TableCell>\r\n        {\" \"}\r\n        <p>\r\n          {dateFormat(\r\n            index * 604800000 + Date.parse(major.hoursOfSubject),\r\n            \"mmmm d, yyyy \"\r\n          )}\r\n        </p>\r\n        <p className={classes.date} test={index++}>\r\n          {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n          {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n        </p>\r\n      </TableCell>\r\n      <TableCell className={classes.disabled}>Absen sudah ditutup</TableCell>\r\n      <TableCell>\r\n        <Badge status={status} />\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n\r\n  const tableUndoneBodys = undoneArray.map((undone) => (\r\n    <TableRow key={undone}>\r\n      <TableCell>\r\n        {\" \"}\r\n        <p>\r\n          {dateFormat(\r\n            index * 604800000 + Date.parse(major.hoursOfSubject),\r\n            \"mmmm d, yyyy \"\r\n          )}\r\n        </p>\r\n        <p className={classes.date} name={index++}>\r\n          {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n          {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n        </p>\r\n      </TableCell>\r\n      <Fragment>\r\n        {isAvailablePresence(index, major.hoursOfSubject) ? (\r\n          <TableCell onClick={handleClickOpen} className={classes.able}>\r\n            Absen disini\r\n          </TableCell>\r\n        ) : (\r\n          <TableCell className={classes.disabled}>\r\n            Absen belum tersedia\r\n          </TableCell>\r\n        )}\r\n      </Fragment>\r\n      <TableCell>\r\n        <Badge status=\"Belum Absen\" />\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    present[\"userId\"] = user.user.id;\r\n    present[\"majorId\"] = id;\r\n    setPresent({ ...present });\r\n\r\n    axios.get(`${proxy}/api/majors/view/${id}`).then((res) => {\r\n      const { data } = res;\r\n\r\n      setMajor({ ...data });\r\n    });\r\n\r\n    axios\r\n      .get(`${proxy}/api/presents/view/${user.user.id}/${id}`)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setPresents({ ...data });\r\n        if (!isEmpty(data)) {\r\n          setUndoneArray([...new Array(14 - data.status.length)]);\r\n        }\r\n\r\n        if (isEmpty(data)) {\r\n          setUndoneArray([...new Array(14)]);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\r\n        Daftar hadir siswa\r\n      </Typography>\r\n      <SimpleTable dataColumnHeaders={dataColumnHeaders}>\r\n        {[...tableBodys, ...tableUndoneBodys]}\r\n      </SimpleTable>\r\n      <DialogPresence\r\n        present={present}\r\n        open={open}\r\n        handleClose={handleClose}\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Presence);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TablePresence\\index.jsx",["314"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { BadgeStatus as Badge } from \"../../atoms/Badge\";\r\nimport ButtonInfo from \"../../atoms/ButtonInfo\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport clsx from \"clsx\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport color from \"../../../utils/color\";\r\n\r\nfunction TablePresence({ id, user, major }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    blue: {\r\n      backgroundColor: color.primary,\r\n      padding: \"0.5rem 1rem\",\r\n      color: color.white,\r\n      borderRadius: \"0.5rem\",\r\n    },\r\n    textWhite: {\r\n      color: color.white,\r\n    },\r\n    bgPrimary: {\r\n      backgroundColor: color.primary,\r\n    },\r\n    btnDanger: {\r\n      color: color.danger,\r\n    },\r\n    btnInfo: {\r\n      backgroundColor: color.black,\r\n      color: color.white,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [presents, setPresents] = useState({\r\n    status: [],\r\n  });\r\n\r\n  const [present, setPresent] = useState({\r\n    userId: \"\",\r\n    majorId: \"\",\r\n    status: \"Hadir\",\r\n  });\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    present[\"status\"] = event.target.value;\r\n    setPresent({ ...present });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setOpen(false);\r\n\r\n    axios\r\n      .post(`${proxy}/api/presents/create`, present)\r\n      .then((res) => {\r\n        setPresents({ ...res.data });\r\n      })\r\n      .catch((err) => console.log(err.response.data));\r\n  };\r\n\r\n  const [undoneArray, setUndoneArray] = useState([]);\r\n\r\n  let i = 0;\r\n\r\n  useEffect(() => {\r\n    present[\"userId\"] = user.user.id;\r\n    present[\"majorId\"] = id;\r\n    setPresent({ ...present });\r\n\r\n    axios\r\n      .get(`${proxy}/api/presents/view/${user.user.id}/${id}`)\r\n      .then((res) => {\r\n        setPresents({ ...res.data });\r\n        if (!isEmpty(res.data)) {\r\n          setUndoneArray([...new Array(14 - res.data.status.length)]);\r\n        } else {\r\n          setUndoneArray([...new Array(14)]);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ marginTop: \"3rem\" }}>\r\n      <Table className={clsx(classes.table)} aria-label=\"simple table\">\r\n        <TableHead className={classes.blue}>\r\n          <TableRow>\r\n            <TableCell className={classes.textWhite}>Tanggal</TableCell>\r\n            <TableCell className={classes.textWhite}>Deskripsi</TableCell>\r\n            <TableCell className={classes.textWhite}>Status</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {!isEmpty(presents.status) &&\r\n            presents.status.map((status) => (\r\n              <TableRow key={status}>\r\n                <TableCell>\r\n                  {\" \"}\r\n                  <p>\r\n                    {dateFormat(\r\n                      i * 604800000 + Date.parse(major.hoursOfSubject),\r\n                      \"mmmm d, yyyy \"\r\n                    )}\r\n                  </p>\r\n                  <p style={{ lineHeight: 0.5 }} test={i++}>\r\n                    {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n                    {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n                  </p>\r\n                </TableCell>\r\n                <TableCell style={{ color: color.light }}>\r\n                  Absen sudah ditutup\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Badge status={status} />\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          {undoneArray.map((undone) => (\r\n            <TableRow key={undone}>\r\n              <TableCell>\r\n                {\" \"}\r\n                <p>\r\n                  {dateFormat(\r\n                    i * 604800000 + Date.parse(major.hoursOfSubject),\r\n                    \"mmmm d, yyyy \"\r\n                  )}\r\n                </p>\r\n                <p style={{ lineHeight: 0.5 }} test={i++}>\r\n                  {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n                  {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n                </p>\r\n              </TableCell>\r\n              {Date.parse(new Date()) >\r\n              (i - 1) * 604800000 + Date.parse(major.hoursOfSubject) ? (\r\n                <TableCell\r\n                  onClick={handleClickOpen}\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  Absen disini\r\n                </TableCell>\r\n              ) : (\r\n                <TableCell style={{ color: \"#9e9e9e\" }}>\r\n                  Absen belum tersedia\r\n                </TableCell>\r\n              )}\r\n\r\n              <TableCell>\r\n                <span className={classes.blue}>Belum absen</span>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogContent style={{ minWidth: 480 }}>\r\n          <DialogTitle id=\"alert-dialog-title\">\r\n            <Typography variant=\"h5\" component=\"h2\" style={{ fontWeight: 500 }}>\r\n              Kehadiran\r\n            </Typography>\r\n          </DialogTitle>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                aria-label=\"gender\"\r\n                name=\"gender1\"\r\n                value={present.status}\r\n                onChange={handleChange}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"Hadir\"\r\n                  control={<Radio />}\r\n                  label=\"Hadir\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Sakit\"\r\n                  control={<Radio />}\r\n                  label=\"Sakit\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Izin\"\r\n                  control={<Radio />}\r\n                  label=\"Izin\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"primary\"\r\n            className={classes.btnDanger}\r\n          >\r\n            Batal\r\n          </Button>\r\n          <ButtonInfo handleClick={handleSubmit}>Ok</ButtonInfo>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TablePresence);\r\n",["315","316"],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\Login\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Announcment\\index.jsx",["317"],"import React, { useEffect } from \"react\";\r\n\r\nimport Headers from \"../../atoms/Headers\";\r\nimport NotFound from \"../../atoms/NotFound\";\r\nimport CardAnnouncement from \"../../molecules/CardAnnouncement\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport { viewAnnouncement } from \"../../../redux/actions/announcementAction\";\r\n\r\nfunction Announcement({ announcements, viewAnnouncement }) {\r\n  useEffect(() => {\r\n    viewAnnouncement();\r\n  }, []);\r\n\r\n  const cardAnnouncements = announcements.announcement.map(\r\n    ({ _id, title, description, date }) => (\r\n      <CardAnnouncement\r\n        id={_id}\r\n        title={title}\r\n        description={description}\r\n        date={date}\r\n      />\r\n    )\r\n  );\r\n  return (\r\n    <div>\r\n      <Headers title=\"Pengumuman\" />\r\n      <Grid container spacing={2}>\r\n        {!isEmpty(announcements.announcement) ? (\r\n          cardAnnouncements\r\n        ) : (\r\n          <NotFound />\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  announcements: state.announcements,\r\n});\r\n\r\nexport default connect(mapStateToProps, { viewAnnouncement })(Announcement);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\format.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Paper\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Dialogs\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ExamIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\SimpleTable\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\TheoryIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CKEditor\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DialogPresence\\index.jsx",["318"],"import React from \"react\";\r\n\r\nimport ButtonInfo from \"../../atoms/ButtonInfo\";\r\nimport ButtonRed from \"../../atoms/ButtonRed\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\n\r\nfunction DialogPresence({\r\n  present,\r\n  open,\r\n  handleClose,\r\n  handleChange,\r\n  handleSubmit,\r\n}) {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 480,\r\n    },\r\n    title: {\r\n      fontWeight: 500,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"title\"\r\n      aria-describedby=\"description\"\r\n    >\r\n      <DialogContent className={classes.root}>\r\n        <DialogTitle id=\"title\">\r\n          <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\r\n            Kehadiran\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContentText id=\"description\">\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              aria-label=\"gender\"\r\n              name=\"gender\"\r\n              value={present.status}\r\n              onChange={handleChange}\r\n            >\r\n              <FormControlLabel\r\n                value=\"Hadir\"\r\n                control={<Radio />}\r\n                label=\"Hadir\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"Sakit\"\r\n                control={<Radio />}\r\n                label=\"Sakit\"\r\n              />\r\n              <FormControlLabel value=\"Izin\" control={<Radio />} label=\"Izin\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <ButtonRed onClick={handleClose}>Batal</ButtonRed>\r\n        <ButtonInfo handleClick={handleSubmit}>Ok</ButtonInfo>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default DialogPresence;\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Sub\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\NotFound\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteTeacher.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\BreadCrumb\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Header\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Headers\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncementNew\\index.jsx",[],{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","severity":1,"message":"324","line":2,"column":8,"nodeType":"325","messageId":"326","endLine":2,"endColumn":11},{"ruleId":"327","severity":1,"message":"328","line":211,"column":6,"nodeType":"329","endLine":211,"endColumn":63,"suggestions":"330"},{"ruleId":"331","severity":1,"message":"332","line":349,"column":52,"nodeType":"333","messageId":"334","endLine":349,"endColumn":54},{"ruleId":"335","severity":1,"message":"336","line":360,"column":27,"nodeType":"337","endLine":360,"endColumn":56},{"ruleId":"335","severity":1,"message":"336","line":380,"column":27,"nodeType":"337","endLine":380,"endColumn":56},{"ruleId":"327","severity":1,"message":"338","line":44,"column":6,"nodeType":"329","endLine":44,"endColumn":36,"suggestions":"339"},{"ruleId":"323","severity":1,"message":"340","line":8,"column":8,"nodeType":"325","messageId":"326","endLine":8,"endColumn":17},{"ruleId":"327","severity":1,"message":"341","line":91,"column":6,"nodeType":"329","endLine":91,"endColumn":28,"suggestions":"342"},{"ruleId":"327","severity":1,"message":"343","line":171,"column":6,"nodeType":"329","endLine":171,"endColumn":10,"suggestions":"344"},{"ruleId":"323","severity":1,"message":"345","line":6,"column":8,"nodeType":"325","messageId":"326","endLine":6,"endColumn":13},{"ruleId":"323","severity":1,"message":"346","line":7,"column":8,"nodeType":"325","messageId":"326","endLine":7,"endColumn":17},{"ruleId":"323","severity":1,"message":"347","line":9,"column":8,"nodeType":"325","messageId":"326","endLine":9,"endColumn":22},{"ruleId":"323","severity":1,"message":"348","line":10,"column":8,"nodeType":"325","messageId":"326","endLine":10,"endColumn":17},{"ruleId":"323","severity":1,"message":"349","line":12,"column":8,"nodeType":"325","messageId":"326","endLine":12,"endColumn":13},{"ruleId":"323","severity":1,"message":"350","line":20,"column":8,"nodeType":"325","messageId":"326","endLine":20,"endColumn":15},{"ruleId":"327","severity":1,"message":"351","line":151,"column":6,"nodeType":"329","endLine":151,"endColumn":10,"suggestions":"352"},{"ruleId":"327","severity":1,"message":"353","line":92,"column":6,"nodeType":"329","endLine":92,"endColumn":8,"suggestions":"354"},{"ruleId":"323","severity":1,"message":"355","line":8,"column":8,"nodeType":"325","messageId":"326","endLine":8,"endColumn":13},{"ruleId":"323","severity":1,"message":"355","line":6,"column":8,"nodeType":"325","messageId":"326","endLine":6,"endColumn":13},{"ruleId":"319","replacedBy":"356"},{"ruleId":"321","replacedBy":"357"},{"ruleId":"327","severity":1,"message":"358","line":221,"column":6,"nodeType":"329","endLine":221,"endColumn":8,"suggestions":"359"},{"ruleId":"327","severity":1,"message":"358","line":166,"column":6,"nodeType":"329","endLine":166,"endColumn":8,"suggestions":"360"},{"ruleId":"319","replacedBy":"361"},{"ruleId":"321","replacedBy":"362"},{"ruleId":"327","severity":1,"message":"363","line":16,"column":6,"nodeType":"329","endLine":16,"endColumn":8,"suggestions":"364"},{"ruleId":"323","severity":1,"message":"365","line":6,"column":8,"nodeType":"325","messageId":"326","endLine":6,"endColumn":14},"no-native-reassign",["366"],"no-negated-in-lhs",["367"],"no-unused-vars","'css' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.user.kelasId'. Either include it or remove the dependency array.","ArrayExpression",["368"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'user.isAuthenticated' and 'user.user.kelasId'. Either include them or remove the dependency array.",["369"],"'Container' is defined but never used.","React Hook useEffect has a missing dependency: 'announcement'. Either include it or remove the dependency array. You can also do a functional update 'setAnnouncement(a => ...)' if you only need 'announcement' in the 'setAnnouncement' call.",["370"],"React Hook useEffect has missing dependencies: 'clearErrorSucess', 'exam', and 'ujian'. Either include them or remove the dependency array. If 'clearErrorSucess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["371"],"'Table' is defined but never used.","'TableBody' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'Paper' is defined but never used.","'isEmpty' is defined but never used.","React Hook useEffect has missing dependencies: 'present' and 'user.user.id'. Either include them or remove the dependency array. You can also do a functional update 'setPresent(p => ...)' if you only need 'present' in the 'setPresent' call.",["372"],"React Hook useEffect has a missing dependency: 'user.isAuthenticated.id'. Either include it or remove the dependency array.",["373"],"'color' is defined but never used.",["366"],["367"],"React Hook useEffect has missing dependencies: 'id', 'present', and 'user.user.id'. Either include them or remove the dependency array. You can also do a functional update 'setPresent(p => ...)' if you only need 'present' in the 'setPresent' call.",["374"],["375"],["366"],["367"],"React Hook useEffect has a missing dependency: 'viewAnnouncement'. Either include it or remove the dependency array. If 'viewAnnouncement' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["376"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"385","fix":"389"},{"desc":"385","fix":"390"},{"desc":"391","fix":"392"},"Update the dependencies array to be: [user.isAuthenticated.role, user.isAuthenticated.majorId, user.user.kelasId]",{"range":"393","text":"394"},"Update the dependencies array to be: [user.isAuthenticated, user.isAuthenticated.majorId, user.user.kelasId]",{"range":"395","text":"396"},"Update the dependencies array to be: [announcement, clearErrorSucess, id]",{"range":"397","text":"398"},"Update the dependencies array to be: [clearErrorSucess, exam, id, ujian]",{"range":"399","text":"400"},"Update the dependencies array to be: [id, present, user.user.id]",{"range":"401","text":"402"},"Update the dependencies array to be: [user.isAuthenticated.id]",{"range":"403","text":"404"},{"range":"405","text":"402"},{"range":"406","text":"402"},"Update the dependencies array to be: [viewAnnouncement]",{"range":"407","text":"408"},[5797,5854],"[user.isAuthenticated.role, user.isAuthenticated.majorId, user.user.kelasId]",[1054,1084],"[user.isAuthenticated, user.isAuthenticated.majorId, user.user.kelasId]",[2766,2788],"[announcement, clearErrorSucess, id]",[4260,4264],"[clearErrorSucess, exam, id, ujian]",[3525,3529],"[id, present, user.user.id]",[2059,2061],"[user.isAuthenticated.id]",[5380,5382],[4169,4171],[531,533],"[viewAnnouncement]"]