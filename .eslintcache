[{"E:\\Web\\JS\\React\\jarpis\\client\\src\\index.js":"1","E:\\Web\\JS\\React\\jarpis\\client\\src\\App.js":"2","E:\\Web\\JS\\React\\jarpis\\client\\src\\store.js":"3","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\index.js":"4","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Navbar\\index.jsx":"5","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\color.js":"6","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Footer\\index.jsx":"7","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\size.js":"8","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Input\\index.jsx":"9","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRoute.jsx":"10","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Dashboard\\index.jsx":"11","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncement\\index.jsx":"12","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Major\\index.jsx":"13","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\userReducer.js":"14","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\index.js":"15","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\userAction.js":"16","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\setAuthToken.js":"17","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\proxy.js":"18","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\errorReducer.js":"19","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\is-empty.js":"20","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteAdmin.jsx":"21","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\sucessReducer.js":"22","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\AnnouncementUpdate\\index.jsx":"23","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Badge\\index.jsx":"24","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Theory\\index.jsx":"25","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Exams\\index.jsx":"26","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\ExamsStudent\\index.jsx":"27","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Profile\\index.jsx":"28","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationValue\\index.jsx":"29","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Recapitulation\\index.jsx":"30","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationStudent\\index.jsx":"31","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\helperAction.js":"32","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonRed\\index.jsx":"33","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonDanger\\index.jsx":"34","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Card\\index.jsx":"35","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\organisms\\Sections\\index.jsx":"36","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonInfo\\index.jsx":"37","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ErrorSucess\\index.jsx":"38","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\QuestionExam\\index.jsx":"39","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CredentialData\\index.jsx":"40","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\EditIcon\\index.jsx":"41","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DeleteIcon\\index.jsx":"42","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\ExamSection\\index.jsx":"43","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TheorySection\\index.jsx":"44","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\Section\\index.jsx":"45","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Register\\index.jsx":"46","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Presence\\index.jsx":"47","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TablePresence\\index.jsx":"48","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Announcment\\index.jsx":"49","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\format.js":"50","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Paper\\index.jsx":"51","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Dialogs\\index.jsx":"52","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ExamIcon\\index.jsx":"53","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\SimpleTable\\index.jsx":"54","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\TheoryIcon\\index.jsx":"55","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CKEditor\\index.jsx":"56","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DialogPresence\\index.jsx":"57","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Sub\\index.jsx":"58","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\NotFound\\index.jsx":"59","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteTeacher.jsx":"60","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\BreadCrumb\\index.jsx":"61","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Header\\index.jsx":"62","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Headers\\index.jsx":"63","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncementNew\\index.jsx":"64","E:\\Web\\JS\\React\\jarpis\\client\\src\\api\\index.jsx":"65","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Login\\index.jsx":"66"},{"size":197,"mtime":1607606201596,"results":"67","hashOfConfig":"68"},{"size":4370,"mtime":1612416671146,"results":"69","hashOfConfig":"68"},{"size":437,"mtime":1607609459473,"results":"70","hashOfConfig":"68"},{"size":296,"mtime":1612419380417,"results":"71","hashOfConfig":"68"},{"size":18860,"mtime":1611160150155,"results":"72","hashOfConfig":"68"},{"size":598,"mtime":1611152774808,"results":"73","hashOfConfig":"68"},{"size":824,"mtime":1608905042467,"results":"74","hashOfConfig":"68"},{"size":57,"mtime":1608907817813,"results":"75","hashOfConfig":"68"},{"size":1118,"mtime":1611041725232,"results":"76","hashOfConfig":"68"},{"size":592,"mtime":1607729791233,"results":"77","hashOfConfig":"68"},{"size":1821,"mtime":1612414773082,"results":"78","hashOfConfig":"68"},{"size":4429,"mtime":1612418921571,"results":"79","hashOfConfig":"68"},{"size":3487,"mtime":1612419883952,"results":"80","hashOfConfig":"68"},{"size":665,"mtime":1608914836436,"results":"81","hashOfConfig":"68"},{"size":215,"mtime":1612418943174,"results":"82","hashOfConfig":"68"},{"size":2432,"mtime":1612417583222,"results":"83","hashOfConfig":"68"},{"size":313,"mtime":1607685745328,"results":"84","hashOfConfig":"68"},{"size":65,"mtime":1608125450327,"results":"85","hashOfConfig":"68"},{"size":263,"mtime":1608914855607,"results":"86","hashOfConfig":"68"},{"size":234,"mtime":1607687543429,"results":"87","hashOfConfig":"68"},{"size":654,"mtime":1611056073246,"results":"88","hashOfConfig":"68"},{"size":267,"mtime":1608914902778,"results":"89","hashOfConfig":"68"},{"size":3499,"mtime":1612419239035,"results":"90","hashOfConfig":"68"},{"size":1674,"mtime":1612419945760,"results":"91","hashOfConfig":"68"},{"size":4917,"mtime":1612419607559,"results":"92","hashOfConfig":"68"},{"size":5206,"mtime":1612419724189,"results":"93","hashOfConfig":"68"},{"size":4272,"mtime":1612416640017,"results":"94","hashOfConfig":"68"},{"size":2334,"mtime":1612417657948,"results":"95","hashOfConfig":"68"},{"size":2081,"mtime":1612419394188,"results":"96","hashOfConfig":"68"},{"size":3686,"mtime":1612419586774,"results":"97","hashOfConfig":"68"},{"size":2268,"mtime":1612418281440,"results":"98","hashOfConfig":"68"},{"size":579,"mtime":1609957937504,"results":"99","hashOfConfig":"68"},{"size":569,"mtime":1609772523142,"results":"100","hashOfConfig":"68"},{"size":688,"mtime":1609772510695,"results":"101","hashOfConfig":"68"},{"size":2462,"mtime":1612419915604,"results":"102","hashOfConfig":"68"},{"size":3644,"mtime":1612350201747,"results":"103","hashOfConfig":"68"},{"size":676,"mtime":1609957080317,"results":"104","hashOfConfig":"68"},{"size":715,"mtime":1611039406140,"results":"105","hashOfConfig":"68"},{"size":1926,"mtime":1611053779222,"results":"106","hashOfConfig":"68"},{"size":751,"mtime":1611000420110,"results":"107","hashOfConfig":"68"},{"size":630,"mtime":1609673562444,"results":"108","hashOfConfig":"68"},{"size":641,"mtime":1610983724797,"results":"109","hashOfConfig":"68"},{"size":3824,"mtime":1611164972744,"results":"110","hashOfConfig":"68"},{"size":3846,"mtime":1611407373484,"results":"111","hashOfConfig":"68"},{"size":1624,"mtime":1611163316252,"results":"112","hashOfConfig":"68"},{"size":9398,"mtime":1611407461214,"results":"113","hashOfConfig":"68"},{"size":6042,"mtime":1612417890575,"results":"114","hashOfConfig":"68"},{"size":8717,"mtime":1611053743278,"results":"115","hashOfConfig":"68"},{"size":1161,"mtime":1612418921548,"results":"116","hashOfConfig":"68"},{"size":328,"mtime":1611066606837,"results":"117","hashOfConfig":"68"},{"size":1383,"mtime":1611407645816,"results":"118","hashOfConfig":"68"},{"size":645,"mtime":1611037290218,"results":"119","hashOfConfig":"68"},{"size":357,"mtime":1611152091802,"results":"120","hashOfConfig":"68"},{"size":2478,"mtime":1611152711070,"results":"121","hashOfConfig":"68"},{"size":366,"mtime":1611152397503,"results":"122","hashOfConfig":"68"},{"size":1504,"mtime":1611053911323,"results":"123","hashOfConfig":"68"},{"size":2464,"mtime":1611067223206,"results":"124","hashOfConfig":"68"},{"size":813,"mtime":1611068127512,"results":"125","hashOfConfig":"68"},{"size":127,"mtime":1611069096002,"results":"126","hashOfConfig":"68"},{"size":660,"mtime":1611070806653,"results":"127","hashOfConfig":"68"},{"size":976,"mtime":1612419956274,"results":"128","hashOfConfig":"68"},{"size":835,"mtime":1611407243722,"results":"129","hashOfConfig":"68"},{"size":563,"mtime":1611166675470,"results":"130","hashOfConfig":"68"},{"size":3484,"mtime":1611168881067,"results":"131","hashOfConfig":"68"},{"size":4670,"mtime":1612419434409,"results":"132","hashOfConfig":"68"},{"size":5780,"mtime":1612419679649,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"1sid8fm",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"136"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"136"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"136"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"136"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"136"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"136"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"136"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"E:\\Web\\JS\\React\\jarpis\\client\\src\\index.js",[],["278","279"],"E:\\Web\\JS\\React\\jarpis\\client\\src\\App.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\store.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\index.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Navbar\\index.jsx",["280","281","282","283","284"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport css from \"./style.css\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport CastForEducationIcon from \"@material-ui/icons/CastForEducation\";\r\nimport TabIcon from \"@material-ui/icons/Tab\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport ClassIcon from \"@material-ui/icons/Class\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport BookIcon from \"@material-ui/icons/Book\";\r\nimport SchoolIcon from \"@material-ui/icons/School\";\r\nimport TableChartIcon from \"@material-ui/icons/TableChart\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\n\r\nimport color from \"../../../utils/color\";\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport size from \"../../../utils/size\";\r\nimport { logoutUser } from \"../../../redux/actions/userAction\";\r\n\r\nfunction Navbar({ user, logoutUser, history }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginBottom: `${size.big}rem`,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    menuItem: {\r\n      minWidth: 300,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      cursor: \"pointer\",\r\n    },\r\n    announcement: {\r\n      padding: \"0 1.5rem\",\r\n      display: \"inline-block\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        paddingRight: \"0.5rem\",\r\n        paddingLeft: \"0.5rem\",\r\n      },\r\n    },\r\n    disabled: {\r\n      cursor: \"default\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"inherit\",\r\n      },\r\n      \"&:visited\": {\r\n        backgroundColor: \"inherit\",\r\n      },\r\n      \"&:active\": {\r\n        backgroundColor: \"inherit\",\r\n      },\r\n    },\r\n    subTab: {\r\n      paddingLeft: \"2rem\",\r\n    },\r\n    subSubTab: {\r\n      paddingLeft: \"4rem\",\r\n    },\r\n    appBar: {\r\n      backgroundColor: color.primary,\r\n    },\r\n    majorIcon: {\r\n      width: 24,\r\n      height: 24,\r\n    },\r\n    darkActive: {\r\n      backgroundColor: color.primary,\r\n      color: color.white,\r\n      \"&:hover\": {\r\n        backgroundColor: color.primary,\r\n        color: color.white,\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const [currentMajor, setCurrentMajor] = useState({\r\n    majorName: \"\",\r\n  });\r\n\r\n  const [majors, setMajors] = useState([]);\r\n\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n\r\n  const [isShowTheory] = useState(true);\r\n\r\n  const { location } = useHistory();\r\n\r\n  const [admins] = useState([\r\n    {\r\n      name: \"Daftar\",\r\n      link: \"/admin/register\",\r\n      icon: <LockOpenIcon />,\r\n    },\r\n    {\r\n      name: \"Pengumuman\",\r\n      link: \"/admin/pengumuman\",\r\n      icon: <AnnouncementIcon />,\r\n    },\r\n    {\r\n      name: \"Rekapitulasi\",\r\n      link: \"/admin/rekapitulasi\",\r\n      icon: <TableChartIcon />,\r\n    },\r\n  ]);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const [recapitulation, setRecapitulation] = useState([]);\r\n\r\n  const handleClose = (e, status) => {\r\n    if (status === \"profile\") {\r\n      history.push(\"/profile\");\r\n    }\r\n    if (status === \"nilai\") {\r\n      history.push(\"/nilai\");\r\n    }\r\n\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    setAnchorEl(null);\r\n\r\n    logoutUser(history);\r\n  };\r\n\r\n  const handleShowTheory = () => {\r\n    setIsDrawerOpen(true);\r\n  };\r\n\r\n  const handleToggleDrawer = (e) => {\r\n    setIsDrawerOpen(!isDrawerOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.pathname.length > 2) {\r\n      axios\r\n        .get(`${proxy}/api/majors/view/${location.pathname.split(\"/\")[2]}`)\r\n        .then((res) => {\r\n          if (res.data) {\r\n            const { data } = res;\r\n\r\n            setCurrentMajor(data);\r\n          } else {\r\n            setCurrentMajor({ majorName: \"\" });\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  useEffect(() => {\r\n    if (user.isAuthenticated.role === \"teacher\") {\r\n      axios\r\n        .post(`${proxy}/api/majors/viewByArray`, user.isAuthenticated.majorId)\r\n        .then((res) => {\r\n          setMajors(res.data);\r\n          setRecapitulation([...res.data]);\r\n        });\r\n    }\r\n    if (user.isAuthenticated.role === \"siswa\") {\r\n      axios\r\n        .get(`${proxy}/api/majors/view?kelasId=${user.user.kelasId}`)\r\n        .then((res) => {\r\n          const { data } = res;\r\n\r\n          setMajors([...data]);\r\n        });\r\n    }\r\n\r\n    if (user.isAuthenticated.role === \"admin\") {\r\n      axios.get(`${proxy}/api/majors/view`).then((res) => {\r\n        const { data } = res;\r\n\r\n        setMajors([...data]);\r\n      });\r\n    }\r\n  }, [user.isAuthenticated.role, user.isAuthenticated.majorId]);\r\n\r\n  console.log(currentMajor);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          {user.isAuthenticated && (\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              onClick={handleToggleDrawer}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          )}\r\n\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Link to=\"/\">\r\n              <SchoolIcon style={{ padding: \"0 0.4rem\" }} />\r\n              Jarpis\r\n            </Link>\r\n            <Link to=\"/pengumuman\" className={classes.announcement}>\r\n              <Typography className={classes.announcement}>\r\n                Pengumuman\r\n              </Typography>\r\n            </Link>\r\n          </Typography>\r\n\r\n          {user.isAuthenticated && (\r\n            <div>\r\n              <span>{user.isAuthenticated.name}</span>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                {user.isAuthenticated.role === \"siswa\" && (\r\n                  <Fragment>\r\n                    <MenuItem\r\n                      onClick={(e) => {\r\n                        handleClose(e, \"profile\");\r\n                      }}\r\n                    >\r\n                      Profile\r\n                    </MenuItem>{\" \"}\r\n                    <MenuItem\r\n                      onClick={(e) => {\r\n                        handleClose(e, \"nilai\");\r\n                      }}\r\n                    >\r\n                      Nilai{\" \"}\r\n                    </MenuItem>\r\n                  </Fragment>\r\n                )}\r\n                <MenuItem onClick={handleLogOut}>\r\n                  Keluar <ExitToAppIcon style={{ paddingLeft: \"0.5rem\" }} />\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n        <Drawer anchor=\"left\" open={isDrawerOpen} onClose={handleToggleDrawer}>\r\n          <div onClick={handleToggleDrawer} onKeyDown={handleToggleDrawer}>\r\n            <List>\r\n              <Link to=\"/dashboard\">\r\n                <ListItem\r\n                  button\r\n                  key=\"dashboard\"\r\n                  className={clsx(classes.menuItem, {\r\n                    [classes.darkActive]: location.pathname === \"/dashboard\",\r\n                  })}\r\n                >\r\n                  <ListItemIcon\r\n                    className={clsx({\r\n                      [classes.darkActive]: location.pathname === \"/dashboard\",\r\n                    })}\r\n                  >\r\n                    {<DashboardIcon />}\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Dashboard\" />\r\n                </ListItem>\r\n              </Link>\r\n              {user.isAuthenticated.role === \"siswa\" ? (\r\n                <ListItem\r\n                  button\r\n                  className={(classes.menuItem, classes.disabled)}\r\n                >\r\n                  <ListItemIcon>\r\n                    <ClassIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText> Kelas {user.user.kelas}</ListItemText>\r\n                </ListItem>\r\n              ) : (\r\n                <ListItem\r\n                  button\r\n                  className={(classes.menuItem, classes.disabled)}\r\n                >\r\n                  <ListItemIcon>\r\n                    {\" \"}\r\n                    {user.isAuthenticated.role === \"teacher\" ? (\r\n                      <ClassIcon />\r\n                    ) : (\r\n                      <TabIcon />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    {user.isAuthenticated.role === \"teacher\"\r\n                      ? \"Kelas \"\r\n                      : \"Mata Pelajaran\"}\r\n                    {!isEmpty(user.user.kelas) && user.user.kelas.split(\"\")[0]}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              )}\r\n              {majors.map((major) => (\r\n                <Link to={`/mata-pelajaran/${major._id}`}>\r\n                  {!Boolean(currentMajor.majorName == major.majorName) ? (\r\n                    <ListItem\r\n                      button\r\n                      key={major.majorName}\r\n                      className={clsx(classes.menuItem, classes.subTab)}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <img\r\n                          className={classes.img}\r\n                          alt={major.imageName}\r\n                          src={`/majors/${major.imageName}`}\r\n                          className={classes.majorIcon}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={major.majorName} />\r\n                    </ListItem>\r\n                  ) : (\r\n                    <ListItem\r\n                      button\r\n                      key={major.majorName}\r\n                      className={clsx(classes.menuItem, classes.subTab)}\r\n                      style={{\r\n                        backgroundColor: major.color,\r\n                        color: color.white,\r\n                      }}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <img\r\n                          className={classes.img}\r\n                          alt={major.imageName}\r\n                          src={`/majors/${major.imageName}`}\r\n                          className={classes.majorIcon}\r\n                          style={{\r\n                            color: color.white,\r\n                          }}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={major.majorName} />\r\n                    </ListItem>\r\n                  )}\r\n                </Link>\r\n              ))}\r\n              {user.isAuthenticated.role === \"admin\" && (\r\n                <Fragment>\r\n                  <ListItem\r\n                    button\r\n                    key=\"Admin\"\r\n                    className={(classes.menuItem, classes.disabled)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      {\" \"}\r\n                      <TabIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Admin Panel\" />\r\n                  </ListItem>\r\n                  {admins.map((admin) => (\r\n                    <Link to={`${admin.link}`}>\r\n                      <ListItem\r\n                        button\r\n                        key={admin.name}\r\n                        className={clsx(classes.menuItem, classes.subTab, {\r\n                          [classes.darkActive]:\r\n                            location.pathname === admin.link,\r\n                        })}\r\n                      >\r\n                        <ListItemIcon\r\n                          className={clsx({\r\n                            [classes.darkActive]:\r\n                              location.pathname === admin.link,\r\n                          })}\r\n                        >\r\n                          {\" \"}\r\n                          {admin.icon}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={admin.name} />\r\n                      </ListItem>\r\n                    </Link>\r\n                  ))}\r\n                </Fragment>\r\n              )}\r\n\r\n              {user.isAuthenticated.role === \"teacher\" && (\r\n                <Fragment>\r\n                  <ListItem\r\n                    button\r\n                    key=\"Teacher\"\r\n                    className={(classes.menuItem, classes.disabled)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      {\" \"}\r\n                      <TabIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Guru Panel\" />\r\n                  </ListItem>\r\n\r\n                  {majors.map((major) => (\r\n                    <Fragment>\r\n                      <ListItem\r\n                        name=\"subTab\"\r\n                        onClick={handleShowTheory}\r\n                        button\r\n                        className={(classes.menuItem, classes.subTab)}\r\n                      >\r\n                        <ListItemIcon>\r\n                          {\" \"}\r\n                          <BookIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText>{major.majorName} </ListItemText>\r\n                        <ListItemIcon>\r\n                          {\" \"}\r\n                          <ArrowDropDownIcon />\r\n                        </ListItemIcon>\r\n                      </ListItem>\r\n                      {isShowTheory &&\r\n                        [...new Array(14)].map((a, i) => (\r\n                          <Link\r\n                            to={`${\r\n                              i + 1 === 7\r\n                                ? `/guru/ujian/UTS-${major.majorName}/${major._id}`\r\n                                : \"\"\r\n                            }${\r\n                              i + 1 === 14\r\n                                ? `/guru/ujian/UAS-${major.majorName}/${major._id}`\r\n                                : \"\"\r\n                            }${\r\n                              !(i + 1 === 7) && !(i + 1 === 14)\r\n                                ? `/guru/materi/${i + 1}/${major._id}`\r\n                                : \"\"\r\n                            }`}\r\n                          >\r\n                            <ListItem\r\n                              key={i}\r\n                              button\r\n                              className={(classes.menuItem, classes.subSubTab)}\r\n                            >\r\n                              <ListItemIcon>\r\n                                {\" \"}\r\n                                <LibraryAddIcon />\r\n                              </ListItemIcon>\r\n                              <ListItemText>\r\n                                {i + 1 === 7 && \"UTS\"} {i + 1 === 14 && \"UAS\"}{\" \"}\r\n                                {!(i + 1 === 7) &&\r\n                                  !(i + 1 === 14) &&\r\n                                  `Materi ke ${i + 1}`}{\" \"}\r\n                              </ListItemText>\r\n                            </ListItem>\r\n                          </Link>\r\n                        ))}\r\n                    </Fragment>\r\n                  ))}\r\n                  <ListItem button key=\"Rekapitulasi Nilai\">\r\n                    <ListItemIcon>\r\n                      {\" \"}\r\n                      <TableChartIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Rekapitulasi Nilai\" />\r\n                  </ListItem>\r\n                </Fragment>\r\n              )}\r\n\r\n              {recapitulation.map((recap) => (\r\n                <div>\r\n                  <Link\r\n                    to={`/guru/rekapitulasi/UTS-${recap.majorName}/${recap._id}`}\r\n                    style={{ marginTop: 0 }}\r\n                  >\r\n                    <ListItem\r\n                      button\r\n                      key={recap.majorName}\r\n                      className={(classes.menuItem, classes.subTab)}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <CastForEducationIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>UTS {recap.majorName}</ListItemText>\r\n                    </ListItem>\r\n                  </Link>\r\n                  <Link\r\n                    to={`/guru/rekapitulasi/UAS-${recap.majorName}/${recap._id}`}\r\n                  >\r\n                    <ListItem\r\n                      button\r\n                      key={recap.majorName}\r\n                      className={(classes.menuItem, classes.subTab)}\r\n                    >\r\n                      <ListItemIcon>\r\n                        <CastForEducationIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>UAS {recap.majorName}</ListItemText>\r\n                    </ListItem>\r\n                  </Link>\r\n                </div>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        </Drawer>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, { logoutUser })(Navbar));\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\color.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\layout\\Footer\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\size.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Input\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRoute.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Dashboard\\index.jsx",["285"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Card from \"../../atoms/Card\";\r\nimport Headers from \"../../atoms/Headers\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  viewMajorsStudent,\r\n  viewMajorsTeacher,\r\n  viewMajorsAdmin,\r\n} from \"../../../api\";\r\n\r\nfunction Dashboard({ user }) {\r\n  const [majors, setMajors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const { role, majorId } = user.isAuthenticated;\r\n\r\n    const { kelasId } = user.user;\r\n\r\n    async function fetchMajorStudent() {\r\n      const majors = await viewMajorsStudent(kelasId);\r\n\r\n      setMajors([...majors]);\r\n    }\r\n\r\n    async function fetchMajorsTeacher() {\r\n      const majors = await viewMajorsTeacher(majorId);\r\n\r\n      setMajors([...majors]);\r\n    }\r\n\r\n    async function fetchMajorAdmin() {\r\n      const majors = await viewMajorsAdmin();\r\n\r\n      setMajors([...majors]);\r\n    }\r\n\r\n    if (role === \"siswa\") {\r\n      fetchMajorStudent();\r\n    }\r\n\r\n    if (role === \"teacher\") {\r\n      fetchMajorsTeacher();\r\n    }\r\n\r\n    if (role === \"admin\") {\r\n      fetchMajorAdmin();\r\n    }\r\n  }, [user.isAuthenticated.majorId]);\r\n\r\n  const majorCards = majors.map(\r\n    ({\r\n      _id,\r\n      majorName,\r\n      hoursOfSubject,\r\n      hoursOfSubjectFinish,\r\n      imageName,\r\n      color,\r\n    }) => (\r\n      <Card\r\n        id={_id}\r\n        title={majorName}\r\n        from={hoursOfSubject}\r\n        to={hoursOfSubjectFinish}\r\n        imageName={imageName}\r\n        color={color}\r\n      />\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Headers title=\"Mata Pelajaran\" />\r\n      <Grid container spacing={3}>\r\n        {majorCards}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncement\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Major\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\userReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\index.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\userAction.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\setAuthToken.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\proxy.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\errorReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\is-empty.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteAdmin.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\reducers\\sucessReducer.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\AnnouncementUpdate\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Badge\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Theory\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Exams\\index.jsx",["286","287","288","289","290"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Input from \"../../atoms/Input\";\r\nimport Paper from \"../../atoms/Paper\";\r\nimport ErrorSucess from \"../../atoms/ErrorSucess\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport { formatUrl } from \"../../../utils/format\";\r\nimport { viewExamByIdAndType, createExam } from \"../../../api\";\r\n\r\nfunction Exams({ user }) {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      listStyle: \"none\",\r\n      \"& li\": {\r\n        display: \"flex\",\r\n        alignItems: \"flex-end\",\r\n      },\r\n    },\r\n    btn: {\r\n      marginTop: \"2rem\",\r\n    },\r\n    icon: {\r\n      paddingLeft: \"0.5rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const { ujian, id } = useParams();\r\n\r\n  const [exams, setExams] = useState([]);\r\n\r\n  const [dataAnswers] = useState([\r\n    {\r\n      value: \"a\",\r\n      label: \"Jawaban a\",\r\n      idx: 0,\r\n    },\r\n    {\r\n      value: \"b\",\r\n      label: \"Jawaban b\",\r\n      idx: 1,\r\n    },\r\n    {\r\n      value: \"c\",\r\n      label: \"Jawaban c\",\r\n      idx: 2,\r\n    },\r\n    {\r\n      value: \"d\",\r\n      label: \"Jawaban d\",\r\n      idx: 3,\r\n    },\r\n  ]);\r\n\r\n  const [exam, setExam] = useState([...new Array(5)]);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [isSucess, setIsSucess] = useState(false);\r\n\r\n  const handleMenus = (e, i) => {\r\n    exam[i].answer = e.target.value;\r\n\r\n    setExam([...exam]);\r\n  };\r\n\r\n  const handleAddQuestion = () => {\r\n    const question = [\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n      { possibilitesAnswer: [] },\r\n    ];\r\n    setExam([...exam, ...question]);\r\n  };\r\n\r\n  const handleChange = (e, id, idx) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (Boolean(idx)) {\r\n      exam[name].possibilitesAnswer[idx] = value;\r\n      setExam([...exam]);\r\n    }\r\n\r\n    if (!Boolean(idx)) {\r\n      exam[name].examName = value;\r\n      setExam([...exam]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    await createExam({\r\n      userId: \"guru\",\r\n      teacherId: user.user.id,\r\n      majorId: id,\r\n      question: exam,\r\n      type: ujian,\r\n    });\r\n  };\r\n\r\n  const questionExams =\r\n    !loading &&\r\n    exams.map(({ examName, answer, possibilitesAnswer }, i) => (\r\n      <div>\r\n        <Input\r\n          id={i}\r\n          label={`Soal no ${i + 1}`}\r\n          handleChange={handleChange}\r\n          value={examName}\r\n        />\r\n        <ul className={classes.root}>\r\n          <RadioGroup\r\n            aria-label=\"answer\"\r\n            name={i}\r\n            value={answer}\r\n            onChange={(e) => {\r\n              handleMenus(e, i);\r\n            }}\r\n          >\r\n            {dataAnswers.map(({ value, label, idx }) => (\r\n              <li>\r\n                {\" \"}\r\n                <FormControlLabel value={value} control={<Radio />} />{\" \"}\r\n                <Input\r\n                  id={i}\r\n                  label={label}\r\n                  name={i}\r\n                  idx={idx}\r\n                  handleChange={handleChange}\r\n                  value={possibilitesAnswer[0]}\r\n                />\r\n              </li>\r\n            ))}\r\n          </RadioGroup>\r\n        </ul>\r\n      </div>\r\n    ));\r\n\r\n  useEffect(() => {\r\n    async function fetchApi() {\r\n      const exams = await viewExamByIdAndType(id, ujian);\r\n\r\n      if (Boolean(exams)) {\r\n        setExam([...exams.question]);\r\n      }\r\n\r\n      if (!Boolean(exams)) {\r\n        exam.forEach((empty, i) => {\r\n          const question = {\r\n            possibilitesAnswer: [],\r\n          };\r\n          exam[i] = question;\r\n        });\r\n        setExam([...exam]);\r\n      }\r\n      setLoading(false);\r\n    }\r\n\r\n    fetchApi();\r\n  }, [id]);\r\n\r\n  return (\r\n    <Paper title={formatUrl(ujian)}>\r\n      {questionExams}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        className={classes.btn}\r\n        onClick={handleAddQuestion}\r\n      >\r\n        Tambah 5 Soal <AddIcon className={classes.icon} />\r\n      </Button>{\" \"}\r\n      <ErrorSucess\r\n        isError={!isEmpty(errors)}\r\n        isSucess={isSucess}\r\n        errorMessages={[errors.examStudentAnswer]}\r\n        sucessMessage=\"Berhasil Dibuat\"\r\n      />\r\n      <Grid container justify=\"center\">\r\n        <Grid item xs={12} md={6}>\r\n          <Button\r\n            variant=\"contained\"\r\n            className=\"btn-light-black\"\r\n            onClick={handleSubmit}\r\n            className={classes.btn}\r\n            fullWidth\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Exams);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\ExamsStudent\\index.jsx",["291","292","293","294"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Paper from \"../../atoms/Paper\";\r\nimport QuestionExam from \"../../atoms/QuestionExam\";\r\nimport ErrorSucess from \"../../atoms/ErrorSucess\";\r\nimport ButtonInfo from \"../../atoms/ButtonInfo\";\r\nimport ButtonRed from \"../../atoms/ButtonRed\";\r\nimport Dialogs from \"../../atoms/Dialogs\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport { formatUrl } from \"../../../utils/format\";\r\nimport {\r\n  viewExamByIdAndType,\r\n  viewExamByIdUserIdAndType,\r\n  createExamStudent,\r\n} from \"../../../api/\";\r\n\r\nfunction ExamsStudent({ user }) {\r\n  const useStyles = makeStyles({\r\n    btn: {\r\n      marginTop: \"1.5rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const { ujian, id } = useParams();\r\n\r\n  const [examStudentAnswer, setExamStudentAnswer] = useState([...new Array(5)]);\r\n\r\n  const [exam, setExam] = useState([...new Array(5)]);\r\n\r\n  const [isExam, setSucess] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const handleExamStudentAnswer = (e, i) => {\r\n    examStudentAnswer[i] = e.target.value;\r\n    setExamStudentAnswer([...examStudentAnswer]);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setOpen(false);\r\n\r\n    await createExamStudent({\r\n      userId: user.user.id,\r\n      majorId: id,\r\n      question: exam,\r\n      type: ujian,\r\n      examStudentAnswer,\r\n    });\r\n  };\r\n\r\n  const questionExams =\r\n    !loading &&\r\n    exam.map(({ examName, possibilitesAnswer }, i) => (\r\n      <QuestionExam\r\n        numberOfQuestion={i + 1}\r\n        title={examName}\r\n        aAnswer={possibilitesAnswer[0]}\r\n        bAnswer={possibilitesAnswer[1]}\r\n        cAnswer={possibilitesAnswer[2]}\r\n        dAnswer={possibilitesAnswer[3]}\r\n        handleChange={handleExamStudentAnswer}\r\n        value={examStudentAnswer[i]}\r\n        answer={examStudentAnswer[i]}\r\n      />\r\n    ));\r\n\r\n  const isParticipatedExam = isExam ? (\r\n    <Alert>Anda telah mengikuti Ujian</Alert>\r\n  ) : (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={12} md={6}>\r\n        {\" \"}\r\n        <Button\r\n          variant=\"contained\"\r\n          className=\"btn-light-black\"\r\n          onClick={handleClickOpen}\r\n          fullWidth\r\n          className={classes.btn}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function fetchApi() {\r\n      const ujian = await viewExamByIdUserIdAndType(\r\n        id,\r\n        user.isAuthenticated.id,\r\n        ujian\r\n      );\r\n      if (Boolean(ujian)) {\r\n        setIsSuccess(true);\r\n        setExamStudentAnswer([...ujian.examStudentAnswer]);\r\n        setExam([...ujian.question]);\r\n        setLoading(false);\r\n      }\r\n\r\n      if (!Boolean(ujian)) {\r\n        const exam = viewExamByIdAndType(id, ujian);\r\n\r\n        setExamStudentAnswer([...exam.examStudentAnswer]);\r\n        setExam([...exam.question]);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchApi();\r\n  }, [id, ujian, user.isAuthenticated.id]);\r\n\r\n  return (\r\n    <Paper title={formatUrl(ujian)}>\r\n      {questionExams}\r\n      <ErrorSucess\r\n        isSucess={isSuccess}\r\n        isError={!isEmpty(errors)}\r\n        errorMessages={[errors.examStudentAnswer]}\r\n        sucessMessage=\"Berhasil dikirim\"\r\n      />\r\n      {isParticipatedExam}\r\n      <Dialogs\r\n        open={open}\r\n        handleClose={handleClose}\r\n        title=\"Apakah anda yakin ingin submit?\"\r\n      >\r\n        {\" \"}\r\n        <ButtonRed handleClick={handleClose}>Tidak</ButtonRed>\r\n        <ButtonInfo handleClick={handleSubmit}>Ya</ButtonInfo>\r\n      </Dialogs>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ExamsStudent);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Profile\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationValue\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Recapitulation\\index.jsx",["295","296"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { BadgeExam } from \"../../atoms/Badge\";\r\nimport SimpleTable from \"../../atoms/SimpleTable\";\r\n\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport color from \"../../../utils/color\";\r\nimport { viewUsers } from \"../../../api/\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  blue: {\r\n    backgroundColor: color.primary,\r\n    padding: \"0.5rem 1rem\",\r\n    color: color.white,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  allowed: {\r\n    backgroundColor: color.info,\r\n    padding: \"0.5rem 1rem\",\r\n    color: color.white,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  notAllow: {\r\n    backgroundColor: color.danger,\r\n    padding: \"0.5rem 1rem\",\r\n    color: color.white,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  bgPrimary: {\r\n    backgroundColor: color.primary,\r\n  },\r\n  tableRow: {\r\n    \"& > *\": {\r\n      color: color.white,\r\n    },\r\n  },\r\n  container: {\r\n    marginTop: \"3rem\",\r\n  },\r\n  pagination: {\r\n    marginTop: \"2rem\",\r\n    color: color.primary,\r\n  },\r\n});\r\n\r\nfunction Recapitulation({ id, user }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const [recapitulations, setRecapitulation] = useState([]);\r\n\r\n  const [dataColumnHeaders] = useState([\r\n    \"Siswa\",\r\n    \"Mata Pelajaran\",\r\n    \"Total Kehadiran\",\r\n    \"Dapat Mengikuti Ujian\",\r\n  ]);\r\n\r\n  const tableBodys = recapitulations.map(({ _id, userId, majorId, status }) => (\r\n    <TableRow key={_id}>\r\n      <TableCell> {userId.name}</TableCell>\r\n      <TableCell>{majorId.majorName}</TableCell>\r\n      <TableCell>{status.length} / 14</TableCell>\r\n      <TableCell>\r\n        <BadgeExam presence={status.length} />\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n\r\n  const [present, setPresent] = useState({\r\n    userId: \"\",\r\n    majorId: \"\",\r\n    status: \"hadir\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    present[\"userId\"] = user.user.id;\r\n    present[\"majorId\"] = id;\r\n    setPresent({ ...present });\r\n\r\n    async function fetchApi() {\r\n      const users = viewUsers();\r\n      setRecapitulation([...users]);\r\n    }\r\n\r\n    fetchApi();\r\n  }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      <Alert severity=\"warning\">\r\n        Dapat mengikuti ujian ketika kehadiran lebih dari 8\r\n      </Alert>\r\n      <SimpleTable dataColumnHeaders={dataColumnHeaders}>\r\n        {tableBodys}\r\n      </SimpleTable>\r\n      <Pagination\r\n        className={classes.pagination}\r\n        count={10}\r\n        variant=\"outlined\"\r\n        className=\"btn-light-black\"\r\n        shape=\"rounded\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Recapitulation);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\RecapitulationStudent\\index.jsx",["297"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport SimpleTable from \"../../atoms/SimpleTable\";\r\nimport { BadgeResult as Badge } from \"../../atoms/Badge\";\r\n\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\n\r\nfunction RecapitulationStudent({ user }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const [recapitulations, setRecapitulation] = useState([]);\r\n\r\n  const [dataColumnHeaders] = useState([\r\n    \"Siswa\",\r\n    \"Tipe\",\r\n    \"Mata Pelajaran\",\r\n    \"Nilai\",\r\n  ]);\r\n\r\n  const tableBodys = recapitulations.map(\r\n    ({ userId, majorId, type, result }) => (\r\n      <TableRow key={userId}>\r\n        <TableCell> {userId.name}</TableCell>\r\n        <TableCell>{type.split(\"-\")[0]}</TableCell>\r\n        <TableCell>{majorId.majorName}</TableCell>\r\n        <TableCell>\r\n          <Badge result={result} />\r\n        </TableCell>\r\n      </TableRow>\r\n    )\r\n  );\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${proxy}/api/exams/view/recapitulations/${user.isAuthenticated.id}`)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setRecapitulation([...data]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <SimpleTable dataColumnHeaders={dataColumnHeaders}>\r\n      {tableBodys}\r\n    </SimpleTable>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(RecapitulationStudent);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\redux\\actions\\helperAction.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonRed\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonDanger\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Card\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\organisms\\Sections\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ButtonInfo\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ErrorSucess\\index.jsx",["298"],"import React from \"react\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\n\r\nimport color from \"../../../utils/color\";\r\n\r\nfunction ErrorSucess({ isSucess, isError, sucessMessage, errorMessages }) {\r\n  const useStyles = makeStyles({\r\n    alert: {\r\n      marginTop: \"1.5rem\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {isSucess && <Alert className={classes.alert}>{sucessMessage}</Alert>}\r\n      {isError && (\r\n        <Alert className={classes.alert} severity=\"error\">\r\n          {errorMessages.filter((errorMessage) => errorMessage)[0]}\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorSucess;\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\QuestionExam\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CredentialData\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\EditIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DeleteIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\ExamSection\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TheorySection\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\Section\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Register\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Presence\\index.jsx",["299"],"import React, { useState, useEffect, Fragment } from \"react\";\r\n\r\nimport { BadgeStatus as Badge } from \"../../atoms/Badge\";\r\nimport SimpleTable from \"../../atoms/SimpleTable\";\r\nimport DialogPresence from \"../../atoms/DialogPresence\";\r\n\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport color from \"../../../utils/color\";\r\nimport { isAvailablePresence } from \"../../../utils/format\";\r\n\r\nfunction Presence({ user }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      backgroundColor: color.white,\r\n      padding: \"2rem\",\r\n      boxShadow: \"0 .5rem 1rem rgba(0,0,0,.15)\",\r\n    },\r\n    title: {\r\n      fontWeight: 500,\r\n    },\r\n    able: {\r\n      cursor: \"pointer\",\r\n    },\r\n    disabled: {\r\n      color: color.light,\r\n    },\r\n    date: {\r\n      lineHeight: 0.5,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  let [index] = useState(0);\r\n\r\n  const { id } = useParams();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [presents, setPresents] = useState({\r\n    status: [],\r\n  });\r\n\r\n  const [present, setPresent] = useState({\r\n    userId: \"\",\r\n    majorId: \"\",\r\n    status: \"Hadir\",\r\n  });\r\n\r\n  const [major, setMajor] = useState({});\r\n\r\n  const [dataColumnHeaders] = useState([\"Tanggal\", \"Deskripsi\", \"Status\"]);\r\n\r\n  const [undoneArray, setUndoneArray] = useState([]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n\r\n    present[\"status\"] = value;\r\n    setPresent({ ...present });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setOpen(false);\r\n\r\n    axios\r\n      .post(`${proxy}/api/presents/create`, present)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setPresents({ ...data });\r\n      })\r\n      .catch((err) => console.log(err.response.data));\r\n  };\r\n\r\n  const tableBodys = presents.status.map((status) => (\r\n    <TableRow key={status}>\r\n      <TableCell>\r\n        {\" \"}\r\n        <p>\r\n          {dateFormat(\r\n            index * 604800000 + Date.parse(major.hoursOfSubject),\r\n            \"mmmm d, yyyy \"\r\n          )}\r\n        </p>\r\n        <p className={classes.date} test={index++}>\r\n          {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n          {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n        </p>\r\n      </TableCell>\r\n      <TableCell className={classes.disabled}>Absen sudah ditutup</TableCell>\r\n      <TableCell>\r\n        <Badge status={status} />\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n\r\n  const tableUndoneBodys = undoneArray.map((undone) => (\r\n    <TableRow key={undone}>\r\n      <TableCell>\r\n        {\" \"}\r\n        <p>\r\n          {dateFormat(\r\n            index * 604800000 + Date.parse(major.hoursOfSubject),\r\n            \"mmmm d, yyyy \"\r\n          )}\r\n        </p>\r\n        <p className={classes.date} name={index++}>\r\n          {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n          {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n        </p>\r\n      </TableCell>\r\n      <Fragment>\r\n        {isAvailablePresence(index, major.hoursOfSubject) ? (\r\n          <TableCell onClick={handleClickOpen} className={classes.able}>\r\n            Absen disini\r\n          </TableCell>\r\n        ) : (\r\n          <TableCell className={classes.disabled}>\r\n            Absen belum tersedia\r\n          </TableCell>\r\n        )}\r\n      </Fragment>\r\n      <TableCell>\r\n        <Badge status=\"Belum Absen\" />\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    // Need refactor\r\n    present[\"userId\"] = user.user.id;\r\n    present[\"majorId\"] = id;\r\n    setPresent({ ...present });\r\n\r\n    axios.get(`${proxy}/api/majors/view/${id}`).then((res) => {\r\n      const { data } = res;\r\n\r\n      setMajor({ ...data });\r\n    });\r\n\r\n    axios\r\n      .get(`${proxy}/api/presents/view/${user.user.id}/${id}`)\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        setPresents({ ...data });\r\n        if (!isEmpty(data)) {\r\n          setUndoneArray([...new Array(14 - data.status.length)]);\r\n        }\r\n\r\n        if (isEmpty(data)) {\r\n          setUndoneArray([...new Array(14)]);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\r\n        Daftar hadir siswa\r\n      </Typography>\r\n      <SimpleTable dataColumnHeaders={dataColumnHeaders}>\r\n        {[...tableBodys, ...tableUndoneBodys]}\r\n      </SimpleTable>\r\n      <DialogPresence\r\n        present={present}\r\n        open={open}\r\n        handleClose={handleClose}\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Presence);\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\TablePresence\\index.jsx",["300"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { BadgeStatus as Badge } from \"../../atoms/Badge\";\r\nimport ButtonInfo from \"../../atoms/ButtonInfo\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport clsx from \"clsx\";\r\n\r\nimport proxy from \"../../../utils/proxy\";\r\nimport isEmpty from \"../../../utils/is-empty\";\r\nimport color from \"../../../utils/color\";\r\n\r\nfunction TablePresence({ id, user, major }) {\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n      \"Minggu\",\r\n      \"Senin\",\r\n      \"Selasa\",\r\n      \"Rabu\",\r\n      \"Kamis\",\r\n      \"Jum'at\",\r\n      \"Sabtu\",\r\n    ],\r\n    monthNames: [\r\n      \"Junuari\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Maret\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"Desember\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    blue: {\r\n      backgroundColor: color.primary,\r\n      padding: \"0.5rem 1rem\",\r\n      color: color.white,\r\n      borderRadius: \"0.5rem\",\r\n    },\r\n    textWhite: {\r\n      color: color.white,\r\n    },\r\n    bgPrimary: {\r\n      backgroundColor: color.primary,\r\n    },\r\n    btnDanger: {\r\n      color: color.danger,\r\n    },\r\n    btnInfo: {\r\n      backgroundColor: color.black,\r\n      color: color.white,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [presents, setPresents] = useState({\r\n    status: [],\r\n  });\r\n\r\n  const [present, setPresent] = useState({\r\n    userId: \"\",\r\n    majorId: \"\",\r\n    status: \"Hadir\",\r\n  });\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    present[\"status\"] = event.target.value;\r\n    setPresent({ ...present });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setOpen(false);\r\n\r\n    axios\r\n      .post(`${proxy}/api/presents/create`, present)\r\n      .then((res) => {\r\n        setPresents({ ...res.data });\r\n      })\r\n      .catch((err) => console.log(err.response.data));\r\n  };\r\n\r\n  const [undoneArray, setUndoneArray] = useState([]);\r\n\r\n  let i = 0;\r\n\r\n  useEffect(() => {\r\n    present[\"userId\"] = user.user.id;\r\n    present[\"majorId\"] = id;\r\n    setPresent({ ...present });\r\n\r\n    axios\r\n      .get(`${proxy}/api/presents/view/${user.user.id}/${id}`)\r\n      .then((res) => {\r\n        setPresents({ ...res.data });\r\n        if (!isEmpty(res.data)) {\r\n          setUndoneArray([...new Array(14 - res.data.status.length)]);\r\n        } else {\r\n          setUndoneArray([...new Array(14)]);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ marginTop: \"3rem\" }}>\r\n      <Table className={clsx(classes.table)} aria-label=\"simple table\">\r\n        <TableHead className={classes.blue}>\r\n          <TableRow>\r\n            <TableCell className={classes.textWhite}>Tanggal</TableCell>\r\n            <TableCell className={classes.textWhite}>Deskripsi</TableCell>\r\n            <TableCell className={classes.textWhite}>Status</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {!isEmpty(presents.status) &&\r\n            presents.status.map((status) => (\r\n              <TableRow key={status}>\r\n                <TableCell>\r\n                  {\" \"}\r\n                  <p>\r\n                    {dateFormat(\r\n                      i * 604800000 + Date.parse(major.hoursOfSubject),\r\n                      \"mmmm d, yyyy \"\r\n                    )}\r\n                  </p>\r\n                  <p style={{ lineHeight: 0.5 }} test={i++}>\r\n                    {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n                    {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n                  </p>\r\n                </TableCell>\r\n                <TableCell style={{ color: color.light }}>\r\n                  Absen sudah ditutup\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Badge status={status} />\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          {undoneArray.map((undone) => (\r\n            <TableRow key={undone}>\r\n              <TableCell>\r\n                {\" \"}\r\n                <p>\r\n                  {dateFormat(\r\n                    i * 604800000 + Date.parse(major.hoursOfSubject),\r\n                    \"mmmm d, yyyy \"\r\n                  )}\r\n                </p>\r\n                <p style={{ lineHeight: 0.5 }} test={i++}>\r\n                  {dateFormat(major.hoursOfSubject, \"dddd hh:MM TT\")} -{\" \"}\r\n                  {dateFormat(major.hoursOfSubjectFinish, \"hh:MM TT\")}\r\n                </p>\r\n              </TableCell>\r\n              {Date.parse(new Date()) >\r\n              (i - 1) * 604800000 + Date.parse(major.hoursOfSubject) ? (\r\n                <TableCell\r\n                  onClick={handleClickOpen}\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  Absen disini\r\n                </TableCell>\r\n              ) : (\r\n                <TableCell style={{ color: \"#9e9e9e\" }}>\r\n                  Absen belum tersedia\r\n                </TableCell>\r\n              )}\r\n\r\n              <TableCell>\r\n                <span className={classes.blue}>Belum absen</span>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogContent style={{ minWidth: 480 }}>\r\n          <DialogTitle id=\"alert-dialog-title\">\r\n            <Typography variant=\"h5\" component=\"h2\" style={{ fontWeight: 500 }}>\r\n              Kehadiran\r\n            </Typography>\r\n          </DialogTitle>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                aria-label=\"gender\"\r\n                name=\"gender1\"\r\n                value={present.status}\r\n                onChange={handleChange}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"Hadir\"\r\n                  control={<Radio />}\r\n                  label=\"Hadir\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Sakit\"\r\n                  control={<Radio />}\r\n                  label=\"Sakit\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Izin\"\r\n                  control={<Radio />}\r\n                  label=\"Izin\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"primary\"\r\n            className={classes.btnDanger}\r\n          >\r\n            Batal\r\n          </Button>\r\n          <ButtonInfo handleClick={handleSubmit}>Ok</ButtonInfo>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TablePresence);\r\n",["301","302"],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Announcment\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\format.js",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Paper\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Dialogs\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\ExamIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\SimpleTable\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\TheoryIcon\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\CKEditor\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\DialogPresence\\index.jsx",["303"],"import React from \"react\";\r\n\r\nimport ButtonInfo from \"../../atoms/ButtonInfo\";\r\nimport ButtonRed from \"../../atoms/ButtonRed\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport makeStyles from \"@material-ui/styles/makeStyles\";\r\n\r\nfunction DialogPresence({\r\n  present,\r\n  open,\r\n  handleClose,\r\n  handleChange,\r\n  handleSubmit,\r\n}) {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 480,\r\n    },\r\n    title: {\r\n      fontWeight: 500,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"title\"\r\n      aria-describedby=\"description\"\r\n    >\r\n      <DialogContent className={classes.root}>\r\n        <DialogTitle id=\"title\">\r\n          <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\r\n            Kehadiran\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContentText id=\"description\">\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              aria-label=\"gender\"\r\n              name=\"gender\"\r\n              value={present.status}\r\n              onChange={handleChange}\r\n            >\r\n              <FormControlLabel\r\n                value=\"Hadir\"\r\n                control={<Radio />}\r\n                label=\"Hadir\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"Sakit\"\r\n                control={<Radio />}\r\n                label=\"Sakit\"\r\n              />\r\n              <FormControlLabel value=\"Izin\" control={<Radio />} label=\"Izin\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <ButtonRed onClick={handleClose}>Batal</ButtonRed>\r\n        <ButtonInfo handleClick={handleSubmit}>Ok</ButtonInfo>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default DialogPresence;\r\n","E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Sub\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\NotFound\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\utils\\PrivateRouteTeacher.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\BreadCrumb\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Header\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\atoms\\Headers\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\molecules\\CardAnnouncementNew\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\api\\index.jsx",[],"E:\\Web\\JS\\React\\jarpis\\client\\src\\components\\pages\\Login\\index.jsx",[],{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","severity":1,"message":"309","line":2,"column":8,"nodeType":"310","messageId":"311","endLine":2,"endColumn":11},{"ruleId":"312","severity":1,"message":"313","line":211,"column":6,"nodeType":"314","endLine":211,"endColumn":63,"suggestions":"315"},{"ruleId":"316","severity":1,"message":"317","line":349,"column":52,"nodeType":"318","messageId":"319","endLine":349,"endColumn":54},{"ruleId":"320","severity":1,"message":"321","line":360,"column":27,"nodeType":"322","endLine":360,"endColumn":56},{"ruleId":"320","severity":1,"message":"321","line":380,"column":27,"nodeType":"322","endLine":380,"endColumn":56},{"ruleId":"312","severity":1,"message":"323","line":53,"column":6,"nodeType":"314","endLine":53,"endColumn":36,"suggestions":"324"},{"ruleId":"308","severity":1,"message":"325","line":42,"column":17,"nodeType":"310","messageId":"311","endLine":42,"endColumn":25},{"ruleId":"308","severity":1,"message":"326","line":71,"column":18,"nodeType":"310","messageId":"311","endLine":71,"endColumn":27},{"ruleId":"308","severity":1,"message":"327","line":73,"column":20,"nodeType":"310","messageId":"311","endLine":73,"endColumn":31},{"ruleId":"312","severity":1,"message":"328","line":175,"column":6,"nodeType":"314","endLine":175,"endColumn":10,"suggestions":"329"},{"ruleId":"320","severity":1,"message":"321","line":200,"column":13,"nodeType":"322","endLine":200,"endColumn":36},{"ruleId":"308","severity":1,"message":"330","line":40,"column":18,"nodeType":"310","messageId":"311","endLine":40,"endColumn":27},{"ruleId":"308","severity":1,"message":"326","line":46,"column":18,"nodeType":"310","messageId":"311","endLine":46,"endColumn":27},{"ruleId":"320","severity":1,"message":"321","line":102,"column":11,"nodeType":"322","endLine":102,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":115,"column":9,"nodeType":"310","messageId":"333","endLine":115,"endColumn":14},{"ruleId":"312","severity":1,"message":"334","line":142,"column":6,"nodeType":"314","endLine":142,"endColumn":10,"suggestions":"335"},{"ruleId":"320","severity":1,"message":"321","line":156,"column":9,"nodeType":"322","endLine":156,"endColumn":36},{"ruleId":"312","severity":1,"message":"336","line":92,"column":6,"nodeType":"314","endLine":92,"endColumn":8,"suggestions":"337"},{"ruleId":"308","severity":1,"message":"338","line":6,"column":8,"nodeType":"310","messageId":"311","endLine":6,"endColumn":13},{"ruleId":"312","severity":1,"message":"339","line":222,"column":6,"nodeType":"314","endLine":222,"endColumn":8,"suggestions":"340"},{"ruleId":"312","severity":1,"message":"339","line":166,"column":6,"nodeType":"314","endLine":166,"endColumn":8,"suggestions":"341"},{"ruleId":"304","replacedBy":"342"},{"ruleId":"306","replacedBy":"343"},{"ruleId":"308","severity":1,"message":"344","line":6,"column":8,"nodeType":"310","messageId":"311","endLine":6,"endColumn":14},"no-native-reassign",["345"],"no-negated-in-lhs",["346"],"no-unused-vars","'css' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.user.kelasId'. Either include it or remove the dependency array.","ArrayExpression",["347"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'user.isAuthenticated' and 'user.user'. Either include them or remove the dependency array.",["348"],"'setExams' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'setIsSucess' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'exam' and 'ujian'. Either include them or remove the dependency array. You can also do a functional update 'setExam(e => ...)' if you only need 'exam' in the 'setExam' call.",["349"],"'setSucess' is assigned a value but never used.","no-use-before-define","'ujian' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'present' and 'user.user.id'. Either include them or remove the dependency array. You can also do a functional update 'setPresent(p => ...)' if you only need 'present' in the 'setPresent' call.",["350"],"React Hook useEffect has a missing dependency: 'user.isAuthenticated.id'. Either include it or remove the dependency array.",["351"],"'color' is defined but never used.","React Hook useEffect has missing dependencies: 'id', 'present', and 'user.user.id'. Either include them or remove the dependency array. You can also do a functional update 'setPresent(p => ...)' if you only need 'present' in the 'setPresent' call.",["352"],["353"],["345"],["346"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"360","fix":"364"},{"desc":"360","fix":"365"},"Update the dependencies array to be: [user.isAuthenticated.role, user.isAuthenticated.majorId, user.user.kelasId]",{"range":"366","text":"367"},"Update the dependencies array to be: [user.isAuthenticated, user.isAuthenticated.majorId, user.user]",{"range":"368","text":"369"},"Update the dependencies array to be: [exam, id, ujian]",{"range":"370","text":"371"},"Update the dependencies array to be: [id, present, user.user.id]",{"range":"372","text":"373"},"Update the dependencies array to be: [user.isAuthenticated.id]",{"range":"374","text":"375"},{"range":"376","text":"373"},{"range":"377","text":"373"},[5797,5854],"[user.isAuthenticated.role, user.isAuthenticated.majorId, user.user.kelasId]",[1132,1162],"[user.isAuthenticated, user.isAuthenticated.majorId, user.user]",[4210,4214],"[exam, id, ujian]",[3112,3116],"[id, present, user.user.id]",[2059,2061],"[user.isAuthenticated.id]",[5402,5404],[4169,4171]]